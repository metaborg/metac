module metac

imports
	include/MetaC
	lib/editor-common.generated
	lib/types/-
	lib/analysis/-
	BaseC/trans/analysis/desugar/-
	BaseC/trans/naming/names
	BaseC/trans/naming/variables
	BaseC/trans/typing/types-imports
	BaseC/trans/helpers/helpers
	BaseC/trans/analysis/analyze
	trans/builders/generate
	pp
	Statemachine/trans/naming/names
	Statemachine/trans/generation/builders
	Statemachine/trans/analysis/analyze

rules // Analysis
	
	editor-analyze = analysis-default-editor
	
	analysis-single-default-interface = 
		analysis-single-default(desugar-all, desugar-after-all, id|<language>)
	analysis-multiple-default-interface = 
		analysis-multiple-default(parse-file <+ !(), desugar-all, id, id|<language>, <project-path>)
	
	editor-save = analysis-save-default(|<language>)

rules // Editor services
	
	// Resolves a reference when the user control-clicks or presses F3 in the editor.
	editor-resolve:
		(node, position, ast, path, project-path) -> definition
		where
			definition := <analysis-resolve(|<language>, project-path)> node

	// Returns "hover help" information for a particular node in the editor.
	// For references, this rule is invoked using the resolved term.
	editor-hover:
		(target, position, ast, path, project-path) -> <write-to-string> <get-type> target

	// Completes an identifier when the user presses control-space
	// (the completion identifier in the AST provides additional context information)
	editor-complete:
		(node, position, ast, path, project-path) -> proposals
		where
			proposals := <analysis-propose-completions(|<language>, project-path)> ast
	
	// Formats the program using a pretty printer		
  editor-format:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
    	ext      := <get-extension> path;
      filename := <guarantee-extension(|$[pp.[ext]])> path;
      result   := <pp-debug> selected

rules // Debugging
	
	// Prints the abstract syntax ATerm of a selection.
	debug-show-aterm:
		(selected, position, ast, path, project-path) -> (filename, result)
		with
			filename := <guarantee-extension(|"aterm")> path;
			result	 := selected
			
	// Prints the analyzed annotated abstract syntax ATerm of a selection.
	debug-show-analyzed:
		(selected, position, ast, path, project-path) -> (filename, result)
		with
			filename := <guarantee-extension(|"analyzed.aterm")> path;
			result	 := ast
			
	debug-index-project =
		analysis-debug-index-project(|<language>)
	debug-index-partition =
		analysis-debug-index-partition(|<language>)

	debug-task-project =
		analysis-debug-task-project(|<language>)
	debug-task-partition =
		analysis-debug-task-partition(|<language>)
	debug-task-selection =
		analysis-debug-task-selection(|<language>)
		
	debug-project =
		analysis-debug-project(|<language>)
	debug-partition =
		analysis-debug-partition(|<language>)
		
	debug-reanalyze = 
		analysis-debug-reanalyze(|<language>)

	editor-desugar:
  		(selected, position, ast, path, project-path) -> (filename, text)
  		where
    		filename := <guarantee-extension(|"desugared.aterm")> path ;
    		text     := <desugar-all> selected