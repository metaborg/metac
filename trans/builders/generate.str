module trans/builders/generate

imports
	lib/analysis/-
	lib/editor-common.generated
	lib/index/-
	lib/nabl/-
	lib/task/-
	libstratego-gpp
	libstratego-lib
	lib/c/C
	include/MetaC
	BaseC/trans/analysis/desugar/-
	BaseC/trans/generation/to-c
	BaseC/trans/generation/to-h
	BaseC/trans/generation/to-makefile
	BaseC/trans/generation/to-basec
	BaseC/trans/naming/modules
	
signature constructors

Import : Identifier -> Import

// editor hooks
rules
	// debug builds
	editor-to-c-ast:
	    (selected, position, ast, path, project-path) -> (filename, result)
	    with
			filename := <guarantee-extension(|"c.aterm")> path;
			result   := <to-c>selected
	editor-to-c-ast-debug:
	    (selected, position, ast, path, project-path) -> (filename, result)
	    with
			filename := <guarantee-extension(|"c.aterm")> path;
			result   := <topdown(try(to-c))>selected
	
	// real builders
	editor-to-c:
	    (selected, position, ast, path, project-path) -> None()
	    with
	    	index-setup(|<language>, [project-path], $[[project-path]/[path]]);
			<basec-to-c> (selected, path)
	editor-to-h:
	    (selected, position, ast, path, project-path) -> None()
	    with
	    	index-setup(|<language>, [project-path], $[[project-path]/[path]]);
			<basec-to-h> (selected, path)
	editor-to-makefile:
	    (selected, position, ast, path, project-path) -> None()
	    with
	    	index-setup(|<language>, [project-path], $[[project-path]/[path]]);
			<basec-to-makefile> (selected, path)
	editor-compile:
	    (selected, position, ast, path, project-path) -> None()
	    with
	    	index-setup(|<language>, [project-path], $[[project-path]/[path]]);
	    	<base-c-to-compiledc> (selected, path, project-path)
	editor-execute:
		(selected, position, ast, path, project-path) -> None()
	    with
	    	index-setup(|<language>, [project-path], $[[project-path]/[path]]);
			<basec-execute> (selected, path, project-path)
	editor-compile-multiple:
	    (selected, position, ast, path, project-path) -> None()
	    with
	    	index-setup(|<language>, [project-path], $[[project-path]/[path]]);
			<base-c-to-compiledc-multiple> (selected, path, project-path)
	editor-execute-multiple:
		(selected, position, ast, path, project-path) -> None()
	    with
	    	index-setup(|<language>, [project-path], $[[project-path]/[path]]);
			task-setup(|project-path);
			<basec-execute-multiple> (selected, path, project-path)

// rewriting single files
rules
	basec-to-c:
	    (selected, path) -> None()
	    with
			fileName := <guarantee-extension(|"c")> path;
			result   := <to-c;pp-c-string>selected;
			<write-file> (fileName, result)
	basec-to-h:
	    (selected, path) -> None()
	    with
			fileName := <guarantee-extension(|"h")> path;
			result   := <to-h;pp-c-string>selected;
			<write-file> (fileName, result)
	basec-to-makefile:
	    (selected, path) -> None()
	    with
			fileName := $[[<dirname>path]/Makefile];
			result   := <to-makefile>selected;
			<write-file> (fileName, result)
	basec-to-c-h-makefile:
		(selected, path) -> None()
		with
			<basec-to-c> (selected, path);
			<basec-to-h> (selected, path);
			<basec-to-makefile> (selected, path)
	c-h-makefile-to-compiledc:
	    (selected, path, project-path) -> None()
	    with
			(<call;debug> ("make", ["-C", $["[project-path]/[<dirname>path]"]]) //full path in quotes, in case of spaces
			<+
			<call;debug> ("make", ["-C", $[[project-path]/[<dirname>path]]])); //full path without quotes, for linux/osx
			<refresh-workspace-file>$[[project-path]/[<dirname>path]]
	base-c-to-compiledc:
		(selected, path, project-path) -> None()
		with
			<basec-to-c-h-makefile> (selected, path);
			<c-h-makefile-to-compiledc> (selected, path, project-path)
	compiledc-execute:
		(selected, path, project-path) -> None()
	    with
			exepath := $["[project-path]/[<dirname>path]/[<module-name>selected]"];
			exepath1 := $[[project-path]/[<dirname>path]/[<module-name>selected]];
			(<call> (exepath, []) <+ <call> (exepath1, []))
	basec-execute:
		(selected, path, project-path) -> None()
		with
			<base-c-to-compiledc> (selected, path, project-path);
			<compiledc-execute>	(selected, path, project-path)


// rewrite multiple files
	basec-to-c-h-makefile-multiple:
	    (selected, path, project-path) -> None()
	    with
			allAstsIncludingStatemachines := <add-import-asts> [selected];
			allAsts := <map(to-basec-all;desugar-all)>allAstsIncludingStatemachines;
			
			<filter(\Module(a,b,c)->Module(a,b,c)\);map(\a->(a,<module-to-filename;rebase-filename(|path,project-path)>a)\;basec-to-c)>allAsts;
			<map(\a->(a,<module-to-filename;rebase-filename(|path,project-path)>a)\;basec-to-h)>allAsts;
			
			makeFile := <to-makefile>(selected, <filter(\Module(Identifier(name),_,_)->name\)>allAsts);
			makeFileName := $[[<dirname>path]/Makefile];
			<write-file> (makeFileName, makeFile)

	base-c-to-compiledc-multiple:
		(selected, path, project-path) -> None()
		with
			<basec-to-c-h-makefile-multiple> (selected, path, project-path);
			<c-h-makefile-to-compiledc> (selected, path, project-path)
			
	basec-execute-multiple:
		(selected, path, project-path) -> None()
		with
			<base-c-to-compiledc-multiple> (selected, path, project-path);
			<compiledc-execute>	(selected, path, project-path)


// chase imports to find all asts
rules
	add-import-asts: asts -> allAsts //new identifiers found in imports, add them, call recursive
		where
			newIds := <new-import-ids> asts;
			// <debug>["add-import-asts",newIds];
			<not(eq)> (newIds, []);
	    	importFiles := <ids-to-filenames> newIds; // also filters duplicates
			importAsts := <map(filename-to-ast)> importFiles;
			moreAsts := <conc> (asts, importAsts);
			allAsts := <add-import-asts> moreAsts
			
	add-import-asts: asts -> asts //no new identifiers found in imports, return
		where
			newIds := <new-import-ids> asts;
			// <debug>["add-import-asts2",newIds];
			<eq> (newIds, []) 

	new-import-ids: asts -> newIds
		where
			astIds := <map(module-id)>asts;
			importIds := <mapconcat(import-ids); make-set>asts;
			newIds := <remove-all(\ident-><elem(no-annos-eq)>(ident,astIds)\)> importIds //filter ids that we already have
	
	no-annos-eq: (a, b) -> <eq> (<strip-annos>a, <strip-annos> b)


	module-id: Module(ident, _, _) -> ident
	module-id: ModuleExternal(ident, _, _) -> ident
	import-ids: Module(_, imports, _) -> <map(import-to-id)>imports
		where <not(eq)>(imports, None())
	import-ids: Module(_, None(), _) -> []
	import-ids: ModuleExternal(_,_,_) -> []
	import-to-id: Import(identifier) -> identifier
	
	identifier-to-filename: Identifier(name) -> <nabl-get-all-definitions; Hd; origin-file> name	
	
	ids-to-filenames: ids -> <filter(?Identifier(_)); map(identifier-to-filename)> ids
	
	//module-to-filename: Module(Identifier(name{anon}),_,_) -> fileName
		//where [(fileName,[])] := <index-lookup; index-get-files-of>name{anon}
	
	module-to-filename: Module(Identifier(name),_,_) -> fileName	
		where fileName := <origin-file> name													//TODO test
	//module-to-filename: ModuleExternal(Identifier(name{anon}),_,_) -> fileName
	 	//where [(fileName,[])] := <index-lookup; index-get-files-of>name{anon}
	module-to-filename: ModuleExternal(Identifier(name),_,_) -> fileName
	 	where fileName := <origin-file> name													//TODO test
	
	remove-chars(|charlist): string -> newstring
		where
			if <eq> (charlist, []) 
			then newstring := string
			else 
			[currentchar | tail] := charlist;
			tempstring := <ltrim-chars(?currentchar)> string;
			newstring := <remove-chars(|tail)> tempstring
			end
	
	filename-to-ast: fileName -> ast
		where
			proj-path := <project-path>;
			path:= <remove-chars(| <explode-string> proj-path); remove-chars(| ['/'])> fileName;
			selection := <parse-file> fileName;
			(ast, _, _, _) := <analysis-single-default-interface> (<parse-file> fileName, path , proj-path)
				
	
	rebase-filename(|path,project-path): origfilename -> newfilename
		where
			// <debug>["rebase-filename", origfilename, path,project-path];
			newfilename := $[[project-path]/[<dirname>path]/[<base-filename>origfilename]]


// helper rules
rules
	// filewriter
	write-file: (fileName, content) -> (fileName, content)
		where
			<dirname;ensure-dir> fileName
		where
			fileDescriptor := <fopen> (fileName, "w");
			<fputs> (content, fileDescriptor);
			<fclose> fileDescriptor;
			<refresh-workspace-file> fileName
			
	ensure-dir: path -> path
		where
			<file-exists;filemode;isdir> path
	ensure-dir: path -> path
		where
			<not(file-exists;filemode;isdir)> path;
			<dirname;ensure-dir> path;
			<mkdir> path
	
	// c pretty printer (external)
	pp-c-string =
		ast2abox(|[<import-term(lib/c/c.pp.af)>]);
		box2text-string(|100)
		
	pp-mc-string = 
		ast2abox(|[<import-term(include/MetaC.generated.pp.af)>]);
		box2text-string(|100)
		
		
rules
	debug-show-ast-after-imports: 
		(selected, position, ast, path, project-path) -> (filename, result)
	where
		filename := <guarantee-extension(|"c.imports.aterm")> path;
		result   := <new-import-ids> [ast]
		 