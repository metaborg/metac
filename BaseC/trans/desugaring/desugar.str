module BaseC/trans/desugaring/desugar

imports
	include/metaC
	lib/nbl-library.generated
	libstratego-lib
	lib/editor-common.generated
	lib/index-library.generated
	lib/analysis-library.generated
	lib/analysis-library-internal.generated
	BaseC/trans/desugaring/constructors
	Statemachine/trans/statemachine-desugar

	
rules
	desugar-all = bottomup(try(desugar);try(flatten-list))
	
	//remove all the Some() constructors
	desugar: Some(a) -> a
	
	//a single declaration that declares multiple variables to multiple declarations
	desugar: Declaration(type, vars) -> declarationList
		where
			declarationList := <map(declaration-pairwith(|type))>vars
	
	declaration-pairwith(|type): var -> Declaration(type, var)
	
	desugar: FieldDecl(type, vars) -> declarationList
		where
			declarationList := <map(fieldDecl-pairwith(|type))>vars
	
	fieldDecl-pairwith(|type): var -> FieldDecl(type, var)
			
	desugar: Negative(Decimal(val)) -> Decimal($[-[val]])
	
	desugar: Binary(val) -> Decimal(<bin-string-to-int> binval)			//needed because there is no def of binary in the c syntax
	where
		binval:= <ltrim-chars(?'0'); ltrim-chars(?'b')> val
	
	desugar: BasicType(a) -> BasicType("long double")
	where
		<is-substring(!"long")> a;
		<is-substring(!"double")> a
		
/*	desugar: amb([Exp(_), Declaration(Pointer(StructType(typeId)), init)]) -> Declaration(Pointer(StructType(typeId)),init)
	where
		Identifier(_) := typeId; 
		not(<index-is-unresolved(|typeId, <index-uri> typeId)> typeId)
*/	
	
	/*desugar: For(
			[Declaration(type, Init(varName, value))], 
			cond, 
			postIterInstr, 
			loopBody) -> 
					[Declaration(type, Init(varName, value)),
					For(None(), cond, postIterInstr, loopBody)]
	*/
	desugar: For(
			[Declaration(type, Init(varName, value))], 
			cond, 
			postIterInstr, 
			loopBody) -> 
					[Declaration(type, NoInit(varName)),
					For(Assign(varName, Assign(), value), cond, postIterInstr, loopBody)]
			
	/**
	 * Expressions
	 */
	
/*	initial version
	desugar: Subtraction(exp1, exp2) -> BinExp(MINUS(), exp1, exp2)
	desugar: Addition(exp1, exp2) -> BinExp(PLUS(), exp1, exp2)
	desugar: Multiplication(exp1, exp2) -> BinExp(MUL(), exp1, exp2)
	desugar: Division(exp1, exp2) -> BinExp(DIV(), exp1, exp2)
	desugar: Modulo(exp1, exp2) -> BinExp(MOD(), exp1, exp2)
*/

	desugar: Addition(e1, e2) 			-> 	BinExp(Plus(), e1, e2)
	desugar: Subtraction(e1, e2)		-> 	BinExp(Minus(), e1, e2)
	desugar: Division(e1, e2) 			-> 	BinExp(Div(), e1, e2)
	desugar: Modulo(e1, e2) 			-> 	BinExp(Mod(), e1, e2)
	desugar: Multiplication(e1, e2) 	-> 	BinExp(Mul(), e1, e2)
	
	desugar: Or(e1, e2) 				-> 	BinExp(LogicOr(), e1, e2)
	desugar: And(e1, e2) 				-> 	BinExp(LogicAnd(), e1, e2)

	desugar: BitwiseOr(e1, e2) 			-> 	BinExp(BWOr(), e1, e2)
	desugar: BitwiseXor(e1, e2) 		-> 	BinExp(BWXor(), e1, e2)
	desugar: BitwiseAnd(e1, e2) 		-> 	BinExp(BWAnd(), e1, e2)
	desugar: Inequal(e1, e2) 			-> 	BinExp(NotEq(), e1, e2)
	desugar: Equal(e1, e2) 				-> 	BinExp(Eq(), e1, e2)
	desugar: GreaterThanEqual(e1, e2) 	-> 	BinExp(GTE(), e1, e2)
	desugar: GreaterThan(e1, e2) 		-> 	BinExp(GT(), e1, e2)
	desugar: LessThanEqual(e1, e2) 		-> 	BinExp(LTE(), e1, e2)
	desugar: LessThan(e1, e2) 			-> 	BinExp(LT(), e1, e2)
	desugar: BitshiftRight(e1, e2) 		-> 	BinExp(BitshiftR(), e1, e2)
	desugar: BitshiftLeft(e1, e2) 		-> 	BinExp(BitshiftL(), e1, e2)
 
 	desugar: SizeOf(e1)					->  UnExp(Size(), e1)
 	desugar: Address(e1)				->  UnExp(Addr(), e1)
 	desugar: Dereference(e1)			->  UnExp(Deref(), e1)
 	desugar: BitwiseComplement(e1)		->  UnExp(BWCompl(), e1)
 	desugar: Not(e1)					->  UnExp(LogicalNot(), e1)
 	desugar: Negative(e1)				->  UnExp(Neg(), e1)
 	desugar: Positive(e1)				->  UnExp(Pos(), e1)
 	desugar: DecrementPrefix(e1)		->  UnExp(DecPre(), e1)
 	desugar: IncrementPrefix(e1)		->  UnExp(IncPre(), e1)
 	desugar: DecrementPostfix(e1)		->  UnExp(DecPost(), e1)
 	desugar: IncrementPostfix(e1)		->  UnExp(IncPost(), e1)


	//desugar: Field(e,f) -> Field(Var(e),f)