module metaC/trans/generation/to-c

imports
	lib/analysis-library.generated
	lib/index-library.generated
	include/MetaC
	lib/c/c
	libstratego-gpp
	baseC/trans/desugaring/desugar


// === rewrite rules for BaseC to C99 === //
//TODO: move to different files
rules
	
	
	/**
	 * Constants & Literals & Identifiers
	 */
	to-c: Decimal(a) -> C-IntConst(a)
	to-c: String(a) -> C-StringLit([a])
	to-c: Identifier(a) -> C-Id(a)
	
	
	/**
	 * Expressions
	 */
	
	
	/**
	 * Types
	 */
	 to-c: BasicType("int32")->C-TypeSpec([], C-TypeId("int32_t"), [])

	
	/**
	 * Expressions
	 */
	to-c: FunctionCall(a, b) -> C-FunCall(<to-c>a, <map(to-c)>b)
	
	/**
	 * Statements
	 */
	to-c: Return(a) -> C-Return(<to-c>a)
	to-c: Block(a) -> C-Compound([], <map(to-c)>a)
	to-c: Exp(a) -> C-Stat(<to-c>a)
	
	
	/**
	 * FunDef
	 */
	to-c: Param(type, name) ->
				  C-ParamDecl(
                    <to-c>type
                  , C-IdDecl([], <to-c>name, None())
                  )
    
    //TODO: do somewhat nicer for string[] argv
    to-c: Param(Array(BasicType("string"), None()), name) ->
    			  C-ParamDecl(
                    C-TypeSpec([], C-TypeId("int8_t"), [])
                  , C-IdDecl(
	                  [C-PointerOf([])]
	                , <to-c>name
	                , C-ArrayDecl(None(), None())
	                )
                  )
                  
    to-c: ParamList(a) -> C-ParamList(<map(to-c)>a)

	to-c: FunDef(_, returnType, name, params, statements) ->
				  C-FunDef(
				  	<to-c>returnType,
				  	C-IdDecl(
				      [],
				      <to-c>name,
				      <to-c>params
				    ),
				    <to-c>Block(statements)
				  )
				 


	/**
	 * Modules
	 */
	to-c: Module(Identifier(modulename), imports, contents) ->
			C-TranslationUnit(<conc>(
				[C-PpControl($[#include "[modulename].h"]),
				 C-PpControl($[#include <stdlib.h>])
				],
				<map(to-c)>contents))


