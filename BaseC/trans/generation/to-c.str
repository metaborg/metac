module metaC/trans/generation/to-c

imports
	lib/analysis/-
	include/MetaC
	lib/c/C
	libstratego-gpp
	lib/nabl/-
	BaseC/trans/analysis/desugar/-
	BaseC/trans/naming/variables
	BaseC/trans/naming/typedefs

// === rewrite rules for BaseC to C99 === //
//TODO: move to different files
rules
	to-c: Exp(None()) -> C-EmptyExp()
	
	to-c: Brackets(exp) -> C-DeclBracket(<to-c> exp)
	
	/**
	 * Default BaseC to C conversion
	 * TODO: enable (and debug)
	 */
	// to-c-def: c#(args) -> $[C-[c]]#(<map(to-c-top)>args)
	// 
	// to-c-top = to-c <+ to-c-def
	
	/**
	 * Constants & Literals & Identifiers
	 */
	
	to-c: Decimal(a) -> C-IntConst(a)
	to-c: Hexadecimal(a) -> C-HexConst(a)
	to-c: Octal(a) -> C-OctConst(a)
	to-c: String(a) -> C-StringLit([a])	
	to-c: Var(a) -> <to-c>a
	to-c: True() -> C-IntConst(1)
	to-c: False() -> C-IntConst(0)
	
	to-c: Identifier(a) -> cId
	where
		<nabl-uri; nabl-uri-namespace; ?NablNsTypeSynonym()> a; cId := C-TypeId(a)
	<+  <nabl-uri; nabl-uri-namespace; ?NablNsVariable()> a; cId := C-Id(a)
	<+  cId := C-Id(a)						//unresolved names; e.g. built-in library functions
	 
	/**
	 * Operators
	 */
	to-c: Assign() -> C-AssignEq()
	to-c: PlusAssign() -> C-AssignPlus()
	to-c: MinusAssign() -> C-AssignMin()
	to-c: MultiplyAssign() -> C-AssignMul()
	to-c: DivisionAssign() -> C-AssignDiv()
	to-c: ModuloAssign() -> C-AssignMod()
	to-c: BitwiseAndAssign() -> C-AssignAnd()
	to-c: BitwiseXorAssign() -> C-AssignExp()
	to-c: BitwiseOrAssign() -> C-AssignOr()
	to-c: BitshiftLeftAssign() -> C-AssignSL()
	to-c: BitshiftRightAssign() -> C-AssignSR()
	
	/**
	 * Types
	 */
	to-c: Type(modifiers, type) -> C-TypeSpec(<map(to-c)>modifiers, <to-c>type, [])
	
	to-c: Void() -> C-Void()
	to-c: Int8() -> C-TypeId("int8_t")
	to-c: Int16() -> C-TypeId("int16_t")
	to-c: Int32() -> C-TypeId("int32_t")
	to-c: Int64() -> C-TypeId("int64_t")
	to-c: String() -> C-TypeId("string") 		//TODO: fix, C doesnt know string
	to-c: Const() -> C-Const()
	to-c: Volatile() -> C-Volatile()
	to-c: Static() -> C-Static()
	
	/**
	 * Declarations
	 */
	    
	to-c: Declaration(type, NoInit(name)) -> 
			  C-Declaration2(
	            typespec
	          , [ C-IdDecl(
	            	plist
	              , <to-c> name, 
	              	postfixDecl
	              	)
	            ]
	          )
	where
		typespec := <to-c-TypeSpec> type;
		plist := <to-c-PointerList(|[])> type;
		postfixDecl := <to-c-PostfixDecl> type
	
	to-c: Declaration(type, Init(b, c)) -> 
			  C-Declaration2(
	            typespec
	          , [ C-DeclInit(
	            	C-IdDecl(
	            	plist, 
	            	<to-c>b, 
	            	postfixDecl
	                )
	            , C-AssignInit(<to-c>c)
	              )
	            ]
	          )          
	where
		typespec := <to-c-TypeSpec> type;
		plist := <to-c-PointerList(|[])> type;
		postfixDecl := <to-c-PostfixDecl> type
	
	to-c: Declaration(type, Init((name, size), init)) -> 
			  C-Declaration2(
	            typespec
	          , [ C-DeclInit(
	            	C-IdDecl(
	            	  plist
	            	, <to-c>name
	            	, postfixDecl
	            	)
	              , <to-c> init
	              )
	            ]
	          )          
	where
		typespec := <to-c-TypeSpec> type;
		plist := <to-c-PointerList(|[])> type;
		postfixDecl := <to-c-PostfixDecl> type	
	
	to-c: InitBlock(a) -> C-ArrayInit(<map(to-c-init)>a)
	to-c-init: a -> C-AssignInit(<to-c> a)
	
	to-c: Declaration( type, NoInit((name, size))) ->
			C-Declaration2(
				typespec
				, C-IdDecl(
				  	plist
				  , <to-c>name
				  , postfixDecl
				  )
			)
	where
		typespec := <to-c-TypeSpec> type;
		plist := <to-c-PointerList(|[])> type;
		postfixDecl := <to-c-PostfixDecl> type
	
	//TODO: fix as below (return Type(...))							
	getTypeSpec(|list): Type(modifiers, Pointer(a)) -> (typespec, nnlist) 
	where
		(typespec, nlist):= <getTypeSpec(|list)> a; 
		nnlist:= [C-PointerOf(<map(to-c)>modifiers)|nlist]	<+
		typespec:= a;nnlist:= [C-PointerOf(<map(to-c)>modifiers)|list]
		
	getTypeSpec(|list): Type(modifiers, type) -> (Type(modifiers, type), list)
	where 
		<debug(!"GET TYPESPEC WITH TYPE() RETURN")> <id>;
		not(Pointer(_) := type)
	
	to-c-TypeSpec: Type(modifiers, Pointer(a)) -> <to-c-TypeSpec> a
	where
		<debug(!"type-pointer: ")> Type(modifiers, Pointer(a))
	
	//TODO: verify for multi-dimensional arrays
	to-c-TypeSpec: Type(modifiers, Array(type, size)) -> <to-c-TypeSpec> type
	where
		<debug(!"type-array: ")> Type(modifiers, Array(type, size))
	
	to-c-TypeSpec: Type(modifiers, type) -> <to-c> <id>
	where
		not(<?Pointer(_)> type);
		not(<?Array(_, _)> type);
		<debug(!"type-simple: ")> Type(modifiers, type)
	
	to-c-PointerList(|list): Type(modifiers, Pointer(type)) -> plist
	where
		nlist:= <to-c-PointerList(|list)> type;
		plist:= [C-PointerOf(<map(to-c)>modifiers) | nlist]
	
	to-c-PointerList(|list): Type(modifiers, Array(type, size)) -> nlist
	where
		nlist:= <to-c-PointerList(|list)> type	
	
	to-c-PointerList(|list): Type(modifiers, type) -> list
	where
		not(<?Pointer(_)> type);
		not(<?Array(_, _)> type)
	
	//TODO: improve for multi-dimensional arrays	
	to-c-PostfixDecl: Type(modifiers, Array(type, size)) -> Some(C-ArrayDecl(None(), Some(<to-c> size)))
	
	to-c-PostfixDecl: Type(modifiers, type) -> None() 	
	where
		not (<?Array(_, _)> type)
	
	/**
	 * Expressions
	 */
	to-c: FunctionCall(a, b) -> C-FunCall(<to-c>a, <map(to-c)>b)
	to-c: BinExp(Plus(), exp1, exp2) 	-> C-Add(<to-c>exp1, <to-c>exp2)
	to-c: BinExp(Minus(), exp1, exp2) 	-> C-Subt(<to-c>exp1, <to-c>exp2)
	to-c: BinExp(Mul(), exp1, exp2)		-> C-Mul(<to-c>exp1, <to-c>exp2)
	to-c: BinExp(Div(), exp1, exp2)		-> C-Div(<to-c>exp1, <to-c>exp2)
	to-c: BinExp(Mod(), exp1, exp2) 	-> C-Mod(<to-c>exp1, <to-c>exp2)
	
	to-c: BinExp(LogicOr(), e1, e2)		-> C-LOr(<to-c>e1, <to-c>e2)
	to-c: BinExp(LogicAnd(), e1, e2)	-> C-LAnd(<to-c>e1, <to-c>e2)

	to-c: BinExp(BWOr(), e1, e2)		-> C-IncOr(<to-c>e1, <to-c>e2)
	to-c: BinExp(BWXor(), e1, e2)		-> C-ExOr(<to-c>e1, <to-c>e2)
	to-c: BinExp(BWAnd(), e1, e2)		-> C-And(<to-c>e1, <to-c>e2)
	to-c: BinExp(NotEq(), e1, e2)		-> C-NotEqual(<to-c>e1, <to-c>e2)
	to-c: BinExp(Eq(), e1, e2)			-> C-Equal(<to-c>e1, <to-c>e2)
	to-c: BinExp(GTE(), e1, e2)			-> C-Ge(<to-c>e1, <to-c>e2)
	to-c: BinExp(GT(), e1, e2)			-> C-Gt(<to-c>e1, <to-c>e2)
	to-c: BinExp(LTE(), e1, e2)			-> C-Le(<to-c>e1, <to-c>e2)
	to-c: BinExp(LT(), e1, e2)			-> C-Lt(<to-c>e1, <to-c>e2)
	to-c: BinExp(BitshiftR(), e1, e2)	-> C-ShiftRight(<to-c>e1, <to-c>e2)
	to-c: BinExp(BitshiftL(), e1, e2)	-> C-ShiftLeft(<to-c>e1, <to-c>e2)
 
 	to-c: UnExp(Size(), e1)				-> C-SizeofType(<to-c>e1)
 	to-c: UnExp(Addr(), e1)				-> C-DeclBracket(C-Address(<to-c>e1))
 	to-c: UnExp(Deref(), e1)			-> C-DeclBracket(C-Deref(<to-c>e1))
 	to-c: UnExp(BWCompl(), e1)			-> C-Tilde(<to-c>e1)
 	to-c: UnExp(LogicalNot(), e1)		-> C-Negation(<to-c>e1)
 	to-c: UnExp(Neg(), e1)				-> C-Negative(<to-c>e1)
 	to-c: UnExp(Pos(), e1)				-> C-Positive(<to-c>e1)
 	to-c: UnExp(DecPre(), e1)			-> C-PreIncr(<to-c>e1)
 	to-c: UnExp(IncPre(), e1)			-> C-PreDecr(<to-c>e1)
 	to-c: UnExp(DecPost(), e1)			-> C-PostDecr(<to-c>e1)
 	to-c: UnExp(IncPost(), e1)			-> C-PostIncr(<to-c>e1)
	
	to-c: FieldViaPointer(var, fieldId) -> C-DerefMember(<to-c> var, <to-c> fieldId)
	
	to-c: ArrayField(arrayName, index) -> C-ArrayIndex(<to-c>arrayName, <to-c>index)
	
	to-c: TypeConversion(type, var) -> 
				C-TypeCast(
					C-TypeName(
						typespec
					,	<to-c-pointer> plist	
					)
				, 	<to-c> var)
	where
		typespec:= <to-c-TypeSpec> type;
		plist:= <to-c-PointerList(|[])> type
	
	to-c-pointer: list -> term
	where
		not(<eq> (<length> list, 0));
		term:= Some(C-Pointer(list, None()))
		<+
		term:= None()
	
	/**
	 * Statements
	 */
	to-c: Return(a) -> C-Return(<to-c>a)
	to-c: None() -> C-EmptyExp()
	to-c: Block(a) -> C-Compound([], <map(to-c)>a)
	to-c: Exp(a) -> C-Stat(<to-c>a)
	to-c: Assign(leftExp, assignOp, rightExp) ->
					C-Assign(
						<to-c> leftExp,
						<to-c> assignOp,
						<to-c> rightExp
					)
	to-c: IfElse(t1, t2, t3) -> C-IfElse(<to-c>t1, <to-c>t2, <to-c>t3)
	to-c: If(t1, t2) -> C-If(<to-c>t1, <to-c>t2)
	to-c: While(t1, t2) -> C-While(<to-c>t1, <to-c>t2)
	to-c: DoWhile(t1, t2) -> C-DoWhile(<to-c>t1, <to-c>t2)
	//to-c: For(t1, t2, t3, t4) -> C-For([], <to-c>t2, <to-c>t3, <to-c>t4) //non declaration for loop
	//to-c: For(t1, t2, t3, t4) -> C-For(<to-c>t1, <to-c>t2, <to-c>t3, <to-c>t4) //non declaration for loop
	to-c: None() -> []
	to-c: For(t1, t2, t3, t4) -> C-For(<to-c>t1, <to-c>t2, <to-c>t3, <to-c>t4) //non declaration for loop
	// to-c: For([Declaration(a,Init(b,c))], t2, t3, t4) -> C-For(declaration, <to-c>t2, <to-c>t3, <to-c>t4) //declaration for loop
	// 	where
	// 		declaration := C-Assign(<to-c>b, C-AssignEq(), <to-c>c)
	
	to-c: Switch(exp, block) -> 
			C-Switch(
  				<to-c> exp
			,	<to-c> block
  			)
			
	to-c: Case(val, statement) ->
			C-Case(
				<to-c> val
			,	<to-c> statement	
			)
	
	to-c: Break() -> C-Break()
	
	to-c: Default(statement) -> C-Default(<to-c> statement)
	
	/**
	 * Labels
	 */
	to-c: Label(name, statement) -> C-Label(<to-c>name, <to-c>statement)
	to-c: Goto(name) -> C-Goto(<to-c>name)
	
	/**
	 * Structs
	 */
	to-c: Struct(_, name, fields) -> 
			C-Declaration2(
		      C-TypeSpec(
		        []
		      , C-Struct(<to-c>name, <map(to-c)>fields)
		      , []
		      )
		    , []
		    )
	
	to-c: NestedStruct(Struct(_, _, fields), name) ->
			C-MemDecl(
				C-TypeSpec(
					[]
				, 	C-Struct(<to-c>name, <map(to-c)>fields)
				,	[]
				)
			,	[C-IdDecl([], <to-c> name, None())]
			)
		    
	to-c: FieldDecl(type, identifier) -> 
			C-MemDecl(
				typespec, 
				[ C-IdDecl(
					<to-c-pointer> plist, 
					<to-c>identifier, 
					postfixDecl
					)
				]
			)
	where
		typespec:= <to-c-TypeSpec> type;
		plist:= <to-c-PointerList(|[])> type;
		postfixDecl := <to-c-PostfixDecl> type
		
		
	//to-c-field-decl: Identifier(a) -> C-IdDecl([], C-Id(a), None())
    to-c: StructType(a) -> C-TypeSpec([], C-StructId(<to-c>a), [])
	to-c: Field(a, b) -> C-Field(<to-c>a, <to-c>b)
	
	/**
	 * Enum
	 */
	
	to-c: Enum(_, name, list) -> 
			C-Declaration2(
      			C-TypeSpec(
        			[]
      			, 	C-Enum(
          				<to-c> name
        			, 	<map(to-c)> list
        			)
      			,	[]
      			)
    		, 	[]
    		)
	
	to-c: EnumItem(name) -> C-Enumerator(<to-c>name, None())
	
	to-c: EnumType(name) -> C-TypeSpec([], C-EnumId(<to-c> name), [])
	 
	/**
	 * FunDef
	 */
	to-c: Param(type, name) ->
				  C-ParamDecl(
                    typespec
                  , C-IdDecl(
                    	<to-c-pointer> plist, 
                    	<to-c>name, 
                    	postfixDecl)
                  )
    where
    	typespec:= <to-c-TypeSpec> type;
		plist:= <to-c-PointerList(|[])> type;
		postfixDecl := <to-c-PostfixDecl> type
	
    	
    //TODO: do somewhat nicer for string[] argv
    to-c: Param(Type([], Array(Type([], String()), None())), name) ->
    			  C-ParamDecl(
                    C-TypeSpec([], C-TypeId("int8_t"), [])
                  , C-IdDecl(
	                  [C-PointerOf([])]
	                , <to-c>name
	                , C-ArrayDecl(None(), None())
	                )
                  )
                  
    to-c: ParamList(a) -> C-ParamList(<map(to-c)>a)

	to-c: FunDef(_, returnType, name, params, statements) ->
				  C-FunDef(
				  	typespec,
				  	C-IdDecl(
				      <to-c-pointer> plist,
				      <to-c>name,
				      <to-c>params
				    ),
				    <to-c>Block(statements)
				  )
	where
		typespec:= <to-c-TypeSpec> returnType;
		plist:= <to-c-PointerList(|[])> returnType		 

	/**
	 * Modules
	 */
	to-c: Module(Identifier(modulename), imports, contents) ->
			C-TranslationUnit(<concat>[
				[C-PpControl($[#include "[modulename].h"]),
				 C-PpControl($[#include <stdlib.h>])
				],
				<import-headers>imports,
				<map(to-c)>contents])

	import-headers: None()->[]
	import-headers: imports -> <map(import-header)>imports
		where
			<not(equal)> (imports, None())
	import-header: Import(Identifier(modulename)) -> C-PpControl($[#include "[modulename].h"])
	