module metaC/trans/generation/to-c

imports
	lib/analysis-library.generated
	lib/index-library.generated
	include/MetaC
	lib/c/c
	libstratego-gpp


signature constructors


rules
	editor-to-c-ast:
	    (selected, position, ast, path, project-path) -> (filename, result)
	    with
			filename := <guarantee-extension(|"c.aterm")> path;
			result   := <to-c>selected
	editor-to-c-ast-debug:
	    (selected, position, ast, path, project-path) -> (filename, result)
	    with
			filename := <guarantee-extension(|"c.aterm")> path;
			result   := <topdown(try(to-c))>selected
			
	editor-to-c:
	    (selected, position, ast, path, project-path) -> (filename, result)
	    with
			filename := <guarantee-extension(|"c")> path;
			result   := <to-c;pp-c-string>selected
	editor-to-c-debug:
	    (selected, position, ast, path, project-path) -> (filename, result)
	    with
			filename := <guarantee-extension(|"c")> path;
			result   := <topdown(try(to-c;pp-c-string))>selected
	
	pp-c-string =
		ast2abox(|[<import-term(lib/c/c.pp.af)>]);
		box2text-string(|100)


// === rewrite rules for BaseC to C99 === //
//TODO: move to different files
rules
	
	/**
	 * Constants & Literals & Identifiers
	 */
	to-c: Decimal(a) -> C-IntConst(a)
	to-c: Identifier(a) -> C-Id(a)
	
	
	/**
	 * Expressions
	 */
	
	
	/**
	 * Types
	 */
	 to-c: BasicType("int32")->C-TypeSpec([], C-TypeId("int32_t"), [])

	
	/**
	 * Statements
	 */
	to-c: Return(a) -> C-Return(a)
	
	
	/**
	 * FunDef
	 */
	to-c: Param(type, name) ->
				  C-ParamDecl(
                    <to-c>type
                  , Some(C-IdDecl([], C-Id(name), None()))
                  )
    
    //TODO: do somewhat nicer for string[] argv
    to-c: Param(Array(BasicType("string"), None()), name) ->
    			  C-ParamDecl(
                    C-TypeSpec([], C-TypeId("int8_t"), [])
                  , Some(
                      C-IdDecl(
                        [C-PointerOf([])]
                      , <to-c>name
                      , Some(C-ArrayDecl(None(), None()))
                      )
                    )
                  )
                  
    to-c: ParamList(a) -> C-ParamList(<map(to-c)>a)

	to-c: FunDef(_, returnType, name, params, statements) ->
				  C-FunDef(
				  	<to-c>returnType,
				  	C-IdDecl(
				      [],
				      <to-c>name,
				      <to-c>params
				    ),
				    <map(to-c)>statements
				  )
				 


	/**
	 * Modules
	 */
	to-c: Module(name, imports, contents) -> C-TranslationUnit(<map(to-c)>contents)


