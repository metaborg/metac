module metaC/trans/generation/generate

imports
	lib/analysis-library.generated
	lib/analysis-library-internal.generated
	lib/editor-common.generated
	lib/index-library.generated
	libstratego-gpp
	libstratego-lib
	lib/c/c
	include/MetaC
	baseC/trans/desugaring/desugar
	baseC/trans/generation/to-c
	baseC/trans/generation/to-h
	baseC/trans/generation/to-makefile
	
signature constructors

Import : Identifier -> Import

// editor hooks
rules
	// debug builds
	editor-to-c-ast:
	    (selected, position, ast, path, project-path) -> (filename, result)
	    with
			filename := <guarantee-extension(|"c.aterm")> path;
			result   := <desugar-all;to-c>selected
	editor-to-c-ast-debug:
	    (selected, position, ast, path, project-path) -> (filename, result)
	    with
			filename := <guarantee-extension(|"c.aterm")> path;
			result   := <desugar-all;topdown(try(to-c))>selected
	
	// real builders
	editor-to-c:
	    (selected, position, ast, path, project-path) -> None()
	    with
			<basec-to-c> (selected, path)
	editor-to-h:
	    (selected, position, ast, path, project-path) -> None()
	    with
			<basec-to-h> (selected, path)
	editor-to-makefile:
	    (selected, position, ast, path, project-path) -> None()
	    with
			<basec-to-makefile> (selected, path)
	editor-compile:
	    (selected, position, ast, path, project-path) -> None()
	    with
	    	<base-c-to-compiledc> (selected, path, project-path)
	editor-execute:
		(selected, position, ast, path, project-path) -> None()
	    with
			<basec-execute> (selected, path, project-path)
	editor-compile-multiple:
	    (selected, position, ast, path, project-path) -> None()
	    with
			<base-c-to-compiledc-multiple> (selected, path, project-path)
	editor-execute-multiple:
		(selected, position, ast, path, project-path) -> None()
	    with
			<basec-execute-multiple> (selected, path, project-path)

// rewriting single files
rules
	basec-to-c:
	    (selected, path) -> None()
	    with
			fileName := <guarantee-extension(|"c")> path;
			result   := <desugar-all;to-c;pp-c-string>selected;
			<write-file> (fileName, result)
	basec-to-h:
	    (selected, path) -> None()
	    with
			fileName := <guarantee-extension(|"h")> path;
			result   := <desugar-all;to-h;pp-c-string>selected;
			<write-file> (fileName, result)
	basec-to-makefile:
	    (selected, path) -> None()
	    with
			fileName := $[[<dirname>path]/Makefile];
			result   := <desugar-all;to-makefile>selected;
			<write-file> (fileName, result)
	basec-to-c-h-makefile:
		(selected, path) -> None()
		with
			<basec-to-c> (selected, path);
			<basec-to-h> (selected, path);
			<basec-to-makefile> (selected, path)
	c-h-makefile-to-compiledc:
	    (selected, path, project-path) -> None()
	    with
			<try(call);debug> ("make", ["-C", $["[project-path]/[<dirname>path]"]]); //full path in quotes, in case of spaces
			<refresh-workspace-file><dirname>path
	base-c-to-compiledc:
		(selected, path, project-path) -> None()
		with
			<basec-to-c-h-makefile> (selected, path);
			<c-h-makefile-to-compiledc> (selected, path, project-path)
	compiledc-execute:
		(selected, path, project-path) -> None()
	    with
			exepath := $["[project-path]/[<dirname>path]/[<module-name>selected].exe"];
			<try(call)> (exepath, [])
	basec-execute:
		(selected, path, project-path) -> None()
		with
			<base-c-to-compiledc> (selected, path, project-path);
			<compiledc-execute>	(selected, path, project-path)


// rewrite multiple files
	basec-to-c-h-makefile-multiple:
	    (selected, path, project-path) -> None()
	    with
	    	desugaredAst := <desugar-all> selected;
	    	(analyzedAst, _) := <analyze-top(|<language>)> (desugaredAst, path, project-path);

			allAsts := <add-import-asts> [analyzedAst];

			<map(\a->(a,<module-to-filename>a)\;basec-to-c)>allAsts;
			<map(\a->(a,<module-to-filename>a)\;basec-to-h)>allAsts;
			
			makeFile := <to-makefile>(analyzedAst, <map(\Module(Identifier(name),_,_)->name\)>allAsts);
			makeFileName := $[[<dirname>path]/Makefile];
			<write-file> (makeFileName, makeFile)

	base-c-to-compiledc-multiple:
		(selected, path, project-path) -> None()
		with
			<basec-to-c-h-makefile-multiple> (selected, path, project-path);
			<c-h-makefile-to-compiledc> (selected, path, project-path)
			
	basec-execute-multiple:
		(selected, path, project-path) -> None()
		with
			<base-c-to-compiledc-multiple> (selected, path, project-path);
			<compiledc-execute>	(selected, path, project-path)


// chase imports to find all asts
rules
	add-import-asts: asts -> allAsts //new identifiers found in imports, add them, call recursive
		where
			newIds := <new-import-ids> asts;
			<not(eq)> (newIds, []);
	    	importFiles := <ids-to-filenames> newIds; // also filters duplicates
			importAsts := <map(filename-to-ast)> importFiles;
			moreAsts := <conc>(asts, importAsts);
			allAsts := <add-import-asts>moreAsts
			
	add-import-asts: asts -> asts //no new identifiers found in imports, return
		where
			newIds := <new-import-ids> asts;
			<eq> (newIds, [])

	new-import-ids: asts -> newIds
		where
			astIds := <map(module-id)>asts;
			importIds := <mapconcat(import-ids)>asts;
			newIds := <remove-all(\ident-><elem>(ident,astIds)\)> importIds //filter ids that we already have

	module-id: Module(ident, _, _) -> ident
	import-ids: Module(_, imports, _) -> <map(import-to-id)>imports
		where <not(eq)>(imports, None())
	import-ids: Module(_, None(), _) -> []
	import-to-id: Import(identifier) -> identifier
	ids-to-filenames: ids -> <filter(\Identifier(name) -> <index-lookup; index-get-files-of; map(Fst)> name\); concat; make-set> ids
	module-to-filename: Module(Identifier(name{anon}),_,_) -> fileName
		where [(fileName,[])] := <index-lookup;index-get-files-of>name{anon}
	filename-to-ast: file -> <index-get-value> AST(("MetaC", file), ())


// helper rules
rules
	// filewriter
	write-file: (fileName, content) -> (fileName, content)
		where
			<dirname;ensure-dir> fileName
		where
			fileDescriptor := <fopen> (fileName, "w");
			<fputs> (content, fileDescriptor);
			<fclose> fileDescriptor;
			<refresh-workspace-file> fileName
			
	ensure-dir: path -> path
		where
			<file-exists;filemode;isdir> path
	ensure-dir: path -> path
		where
			<not(file-exists;filemode;isdir)> path;
			<dirname;ensure-dir> path;
			<mkdir> path
	
	// c pretty printer (external)
	pp-c-string =
		ast2abox(|[<import-term(lib/c/c.pp.af)>]);
		box2text-string(|100)
		
	pp-mc-string = 
		ast2abox(|[<import-term(include/MetaC.generated.pp.af)>]);
		box2text-string(|100)
		 