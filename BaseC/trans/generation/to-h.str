module BaseC/trans/generation/to-h

imports
	include/MetaC
	lib/c/C
	libstratego-gpp
	BaseC/trans/generation/to-c


rules
	// to-h: _ -> DEFAULT-HEADERFILE()
	
	to-h: Module(Identifier(modulename), imports, contents) -> headerfile
	with
		modulenameUppercase := <upper-case>modulename;
		includes := <filter(to-h)> contents;
		headerfile := $[
			#ifndef [modulenameUppercase]
			#define [modulenameUppercase]

			#include <stdint.h>
			
			[<map(pp-c-string); lines> includes]
			
			#endif
			]
	
	is-exported-fundef: FunDef(Exported(), t2, t3, t4, t5) -> FunDef(Exported(), t2, t3, t4, t5) 
	
	to-h: FunDef(Exported(), returnType, name, params, _) -> 
			  C-Declaration2(
	            typespec
	          , [ C-IdDecl(
	            	plist
	              , <to-c> name, 
	              	postfixDecl
	              	)
	            ]
	          )
	where
		typespec := <to-c-TypeSpec> returnType;
		plist := <to-c-PointerList(|[])> returnType;
		postfixDecl := <to-c> params

	to-h: TypedefDecl(type, name) -> 
			  C-Declaration2(
			  	C-DeclSpec(
			  	  []							//typedefModifiers
			  	, C-Typedef()
			  	, typeModifiers
			  	, cType
			  	, postfixTypeModifiers
			  	)
			, [
			  	C-TypedefDeclarator1(
			  	  plist
			  	, <to-c> name
			  	, postfixDecl  
			  	)
			  ]
			  )
	where
		C-TypeSpec(typeModifiers, cType, postfixTypeModifiers):= <to-c-TypeSpec> type;
		plist := <to-c-PointerList(|[])> type;
		postfixDecl := <to-c-PostfixDecl> type
	 

	//TODO: generate a correct header file
	to-h: ModuleExternal(_, None(), _) -> []
	
	to-h: ModuleExternal(_, resources, _) -> <map(to-h);concat-strings>resources
	
	to-h: Resource(Header(Identifier(name))) -> 
		$[#include <[name].h>
		]


overlays
	DEFAULT-HEADERFILE()=
"

#include <stdint.h>

"



// helper rules
rules
	// c pretty printer (external)
	pp-c-string =
		ast2abox(|[<import-term(lib/c/C.pp.af)>]);
		box2text-string(|100)