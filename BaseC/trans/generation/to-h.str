module BaseC/trans/generation/to-h

imports
	include/MetaC
	lib/c/c
	libstratego-gpp
	BaseC/trans/generation/to-c


rules
	// to-h: _ -> DEFAULT-HEADERFILE()
	
	to-h: Module(Identifier(modulename), imports, contents) -> headerfile
	with
		modulenameUppercase := <upper-case>modulename;
		fundefs := <filter(is-exported-fundef)>contents;
		fundefIncludes := <map(to-h)>fundefs;
		headerfile := $[
			#ifndef [modulenameUppercase]
			#define [modulenameUppercase]

			#include <stdint.h>
			
			[<concat-strings>fundefIncludes]
			
			#endif
			]
	
	is-exported-fundef: FunDef(Exported(), t2, t3, t4, t5) -> FunDef(Exported(), t2, t3, t4, t5) 
	
	to-h: FunDef(Exported(), returnType, name, params, _) -> includes
		where
			c-ast := [
						<to-c>returnType,
					  	C-IdDecl(
					      [],
					      <to-c>name,
					      <to-c>params
					    )
				     ];
			includes := $[[<pp-c-string>c-ast];]

	//TODO: generate a correct header file
	to-h: ModuleExternal(_, resources, _) -> []
		where
			<eq>(resources,[])
	to-h: ModuleExternal(Identifier(modulename), resources, _) -> headerfile
		where
			<not(eq)>(resources,[])
		with
			headerfile := $[
			#ifndef [<upper-case>modulename]
			#define [<upper-case>modulename]
			
			[<map(resource-header;pp-c-string);concat-strings>resources]
			
			#endif
			]
	
	resource-header: Resource(Header(Identifier(name))) -> C-PpControl($[#include <[name].h>])


overlays
	DEFAULT-HEADERFILE()=
"

#include <stdint.h>

"



// helper rules
rules
	// c pretty printer (external)
	pp-c-string =
		ast2abox(|[<import-term(lib/c/c.pp.af)>]);
		box2text-string(|100)