module BaseC/trans/naming/names

imports
  lib/analysis-library.generated
  lib/analysis-library-internal.generated
  lib/index-library.generated


imports
  include/metaC
  baseC/trans/typing/types


signature
  constructors
    Type        : DefDataKind
    Import      : DefDataKind
    Transitive  : ImportAnno
    CurrentFile : ImportAnno

  constructors
    Module      : Namespace
    Function    : Namespace
    Variable    : Namespace
    Label       : Namespace
    Field       : Namespace
    Struct      : Namespace
    Union       : Namespace
    Enum        : Namespace
    Enumlit     : Namespace
    Messagelist : Namespace
    Message     : Namespace


rules

  nam-get-scope-types :
    Module(Identifier(name), _, _) -> [ Function()
                                      , Struct()
                                      , Enum()
                                      , Variable()
                                      , Union()
                                      ]

  nam-get-definition-keys :
    Module(Identifier(name), _, _) -> [name]

  nam-get-definitions :
    Module(Identifier(name), _, _) -> [(Module(), [name])]

  nam-annotate-names(|paths__, path__):
    Module(Identifier(name), _, _) -> <Module(
                                         Identifier(nam-annotate-def(|path__))
                                       , id
                                       , id
                                       )>

  nam-unique :
    Module(Identifier(name), _, _) -> <id>


rules

  nam-get-scope-types :
    FunDef(_, returnType, Identifier(name), params, _) -> [Variable()]
    where paramsTypes := <type-of> params

  nam-get-definition-keys :
    FunDef(_, returnType, Identifier(name), params, _) -> [name]
    where paramsTypes := <type-of> params

  nam-get-definitions :
    FunDef(_, returnType, Identifier(name), params, _) -> [(Function(), [name])]
    where paramsTypes := <type-of> params

  nam-annotate-names(|paths__, path__):
    FunDef(_, returnType, Identifier(name), params, _) -> <FunDef(
                                                             id
                                                           , id
                                                           , Identifier(nam-annotate-def(|path__))
                                                           , id
                                                           , id
                                                           )>

  adjust-index-def-data(store__|namespace__, path__):
    FunDef(_, returnType, Identifier(name), params, _) -> <store__> DefData(
                                                                      [namespace__|path__]
                                                                    , Type()
                                                                    , FunType(paramsTypes, returnType)
                                                                    )
    where paramsTypes := <type-of> params

  type-of :
    FunDef(_, returnType, Identifier(name), params, _) -> FunType(paramsTypes, returnType)
    where paramsTypes := <type-of> params

  nam-unique :
    FunDef(_, returnType, Identifier(name), params, _) -> <id>
    where paramsTypes := <type-of> params


rules

  nam-get-uses-keys :
    FunctionCall(Identifier(f), _) -> [f]

  nam-get-uses :
    FunctionCall(Identifier(f), _) -> [(Function(), [f])]

  nam-annotate-names(|paths__, path__):
    FunctionCall(Identifier(f), _) -> <FunctionCall(
                                         Identifier(nam-annotate-use(|paths__, Function()))
                                       , id
                                       )>


rules

  nam-get-definition-keys :
    Param(type, Identifier(name)) -> [name]

  nam-get-definitions :
    Param(type, Identifier(name)) -> [(Variable(), [name])]

  nam-annotate-names(|paths__, path__):
    Param(type, Identifier(name)) -> <Param(id, Identifier(nam-annotate-def(|path__)))>

  adjust-index-def-data(store__|namespace__, path__):
    Param(type, Identifier(name)) -> <store__> DefData(
                                                 [namespace__|path__]
                                               , Type()
                                               , type
                                               )

  type-of :
    Param(type, Identifier(name)) -> type

  nam-unique :
    Param(type, Identifier(name)) -> <id>


rules

  nam-get-definition-keys :
    Declaration(type, Identifier(name)) -> [name]

  nam-get-definitions :
    Declaration(type, Identifier(name)) -> [(Variable(), [name])]

  nam-annotate-names(|paths__, path__):
    Declaration(type, Identifier(name)) -> <Declaration(id, Identifier(nam-annotate-def(|path__)))>

  adjust-index-def-data(store__|namespace__, path__):
    Declaration(type, Identifier(name)) -> <store__> DefData(
                                                       [namespace__|path__]
                                                     , Type()
                                                     , type
                                                     )

  type-of :
    Declaration(type, Identifier(name)) -> type

  nam-unique :
    Declaration(type, Identifier(name)) -> <id>


rules

  nam-get-uses-keys :
    Var(Identifier(name)) -> [name]

  nam-get-uses :
    Var(Identifier(name)) -> [(Variable(), [name])]

  nam-annotate-names(|paths__, path__):
    Var(Identifier(name)) -> <Var(
                                Identifier(nam-annotate-use(|paths__, Variable()))
                              )>


rules

  nam-get-scope-types :
    Union(_, Identifier(u), _) -> [Field()]

  nam-get-definition-keys :
    Union(_, Identifier(u), _) -> [u]

  nam-get-definitions :
    Union(_, Identifier(u), _) -> [(Union(), [u])]

  nam-annotate-names(|paths__, path__):
    Union(_, Identifier(u), _) -> <Union(
                                     id
                                   , Identifier(nam-annotate-def(|path__))
                                   , id
                                   )>

  nam-unique :
    Union(_, Identifier(u), _) -> <id>


rules

  nam-get-scope-types :
    Struct(_, Identifier(s), _) -> [Field()]

  nam-get-definition-keys :
    Struct(_, Identifier(s), _) -> [s]

  nam-get-definitions :
    Struct(_, Identifier(s), _) -> [(Struct(), [s])]

  nam-annotate-names(|paths__, path__):
    Struct(_, Identifier(s), _) -> <Struct(
                                      id
                                    , Identifier(nam-annotate-def(|path__))
                                    , id
                                    )>

  nam-unique :
    Struct(_, Identifier(s), _) -> <id>


rules

  nam-get-uses-keys :
    StructType(Identifier(s)) -> [s]

  nam-get-uses :
    StructType(Identifier(s)) -> [ (Struct(), [s])
                                 , (Union(), [s])
                                 ]

  nam-annotate-names(|paths__, path__):
    StructType(Identifier(s)) -> <StructType(
                                    Identifier(nam-annotate-use(|paths__, Struct()))
                                  )>

  adjust-index-lookup(target__|namespace__, path__, prefix__):
    StructType(Identifier(s)) -> [ [Struct()|path__]
                                 , [Union()|path__]
                                 ]
    where <target__> s


rules

  nam-get-definition-keys :
    FieldDecl(t, Identifier(i)) -> [i]

  nam-get-definitions :
    FieldDecl(t, Identifier(i)) -> [(Field(), [i])]

  nam-annotate-names(|paths__, path__):
    FieldDecl(t, Identifier(i)) -> <FieldDecl(id, Identifier(nam-annotate-def(|path__)))>

  adjust-index-def-data(store__|namespace__, path__):
    FieldDecl(t, Identifier(i)) -> <store__> DefData(
                                               [namespace__|path__]
                                             , Type()
                                             , t
                                             )

  type-of :
    FieldDecl(t, Identifier(i)) -> t

  nam-unique :
    FieldDecl(t, Identifier(i)) -> <id>


rules

  nam-get-uses-keys :
    Field(var, Identifier(field)) -> [field]
    where StructType(Identifier(s)) := <type-of> var

  nam-get-uses :
    Field(var, Identifier(field)) -> [(Field(), [field])]
    where StructType(Identifier(s)) := <type-of> var

  nam-annotate-names(|paths__, path__):
    Field(var, Identifier(field)) -> <Field(
                                        id
                                      , Identifier(nam-annotate-use(|paths__, Field()))
                                      )>

  adjust-index-lookup(target__|namespace__, path__, prefix__):
    Field(var, Identifier(field)) -> <index-lookup-children(|Field(), prefix__)> s
    where <target__> field
    where StructType(Identifier(s)) := <type-of> var


rules

  nam-get-definition-keys :
    Label(l, _) -> [l]

  nam-get-definitions :
    Label(l, _) -> [(Label(), [l])]

  nam-annotate-names(|paths__, path__):
    Label(l, _) -> <Label(nam-annotate-def(|path__), id)>

  nam-unique :
    Label(l, _) -> <id>


rules

  nam-get-uses-keys :
    Goto(l) -> [l]

  nam-get-uses :
    Goto(l) -> [(Label(), [l])]

  nam-annotate-names(|paths__, path__):
    Goto(l) -> <Goto(nam-annotate-use(|paths__, Label()))>


rules

  nam-get-scope-types :
    MessageList(_, Identifier(name), _) -> [Message()]

  nam-get-definition-keys :
    MessageList(_, Identifier(name), _) -> [name]

  nam-get-definitions :
    MessageList(_, Identifier(name), _) -> [(Messagelist(), [name])]

  nam-annotate-names(|paths__, path__):
    MessageList(_, Identifier(name), _) -> <MessageList(
                                              id
                                            , Identifier(nam-annotate-def(|path__))
                                            , id
                                            )>

  nam-unique :
    MessageList(_, Identifier(name), _) -> <id>


rules

  nam-get-definition-keys :
    Message(Identifier(name), _, _, _) -> [name]

  nam-get-definitions :
    Message(Identifier(name), _, _, _) -> [(Message(), [name])]

  nam-annotate-names(|paths__, path__):
    Message(Identifier(name), _, _, _) -> <Message(
                                             Identifier(nam-annotate-def(|path__))
                                           , id
                                           , id
                                           , id
                                           )>

  nam-unique :
    Message(Identifier(name), _, _, _) -> <id>