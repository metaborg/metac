module BaseC/trans/naming/names

imports
  lib/analysis-library.generated
  lib/analysis-library-internal.generated
  lib/index-library.generated


imports
  include/metaC
  BaseC/trans/desugaring/constructors
  BaseC/trans/typing/types


signature
  constructors
    Type        : DefDataKind
    Import      : DefDataKind
    Transitive  : ImportAnno
    CurrentFile : ImportAnno

  constructors
    Module         : Namespace
    ModuleExternal : Namespace
    Import         : Namespace
    Function       : Namespace
    Variable       : Namespace
    Label          : Namespace
    Field          : Namespace
    Struct         : Namespace
    Union          : Namespace
    Enum           : Namespace
    Enumlit        : Namespace
    Messagelist    : Namespace
    Message        : Namespace
    TypeSynonym    : Namespace
    Statemachine   : Namespace


rules

  nam-get-scope-types :
    Block(_) -> [Variable()]


rules

  nam-get-scope-types :
    Module(Identifier(name), _, _) -> [ Function()
                                      , Struct()
                                      , Enum()
                                      , Variable()
                                      , Union()
                                      , Messagelist()
                                      , TypeSynonym()
                                      , Statemachine()
                                      ]

  nam-get-definition-keys :
    Module(Identifier(name), _, _) -> [name]

  nam-get-definitions :
    Module(Identifier(name), _, _) -> [(Module(), [name])]

  nam-annotate-names(|paths__, path__):
    Module(Identifier(name), _, _) -> <Module(
                                         Identifier(nam-annotate-def(|path__))
                                       , id
                                       , id
                                       )>

  nam-unique :
    Module(Identifier(name), _, _) -> <id>


rules

  nam-get-scope-types :
    ModuleExternal(Identifier(name), _, _) -> [Function()]

  nam-get-definition-keys :
    ModuleExternal(Identifier(name), _, _) -> [name]

  nam-get-definitions :
    ModuleExternal(Identifier(name), _, _) -> [(Module(), [name])]

  nam-annotate-names(|paths__, path__):
    ModuleExternal(Identifier(name), _, _) -> <ModuleExternal(
                                                 Identifier(nam-annotate-def(|path__))
                                               , id
                                               , id
                                               )>

  nam-unique :
    ModuleExternal(Identifier(name), _, _) -> <id>


rules

  nam-get-definition-keys :
    Import(Identifier(name), fakename) -> [fakename]

  nam-get-definitions :
    Import(Identifier(name), fakename) -> [(Import(), [fakename])]

  nam-get-uses-keys :
    Import(Identifier(name), fakename) -> [name]

  nam-get-uses :
    Import(Identifier(name), fakename) -> [(Module(), [name])]

  nam-annotate-names(|paths__, path__):
    Import(Identifier(name), fakename) -> <Import(
                                             Identifier(nam-annotate-use(|paths__, Module()))
                                           , nam-annotate-def(|path__)
                                           )>

  adjust-index-def-data(store__|namespace__, path__):
    Import(Identifier(name), fakename) -> <store__> DefData(
                                                      [Function()|path__]
                                                    , Import()
                                                    , (name, [])
                                                    )

  adjust-index-def-data(store__|namespace__, path__):
    Import(Identifier(name), fakename) -> <store__> DefData(
                                                      [Struct()|path__]
                                                    , Import()
                                                    , (name, [])
                                                    )


rules

  nam-get-scope-types :
    FunDef(_, returnType, Identifier(name), params, _) -> [Variable(), TypeSynonym()]
    where paramsTypes := <type-of> params

  nam-get-definition-keys :
    FunDef(_, returnType, Identifier(name), params, _) -> [name]
    where paramsTypes := <type-of> params

  nam-get-definitions :
    FunDef(_, returnType, Identifier(name), params, _) -> [(Function(), [name])]
    where paramsTypes := <type-of> params

  nam-annotate-names(|paths__, path__):
    FunDef(_, returnType, Identifier(name), params, _) -> <FunDef(
                                                             id
                                                           , id
                                                           , Identifier(nam-annotate-def(|path__))
                                                           , id
                                                           , id
                                                           )>

  adjust-index-def-data(store__|namespace__, path__):
    FunDef(_, returnType, Identifier(name), params, _) -> <store__> DefData(
                                                                      [namespace__|path__]
                                                                    , Type()
                                                                    , FunType(paramsTypes, returnType)
                                                                    )
    where paramsTypes := <type-of> params

  type-of :
    FunDef(_, returnType, Identifier(name), params, _) -> FunType(paramsTypes, returnType)
    where paramsTypes := <type-of> params

  nam-unique :
    FunDef(_, returnType, Identifier(name), params, _) -> <id>
    where paramsTypes := <type-of> params


rules

  nam-get-scope-types :
    FunProto(returnType, Identifier(name), params) -> [Variable(), TypeSynonym()]
    where paramsTypes := <type-of> params

  nam-get-definition-keys :
    FunProto(returnType, Identifier(name), params) -> [name]
    where paramsTypes := <type-of> params

  nam-get-definitions :
    FunProto(returnType, Identifier(name), params) -> [(Function(), [name])]
    where paramsTypes := <type-of> params

  nam-annotate-names(|paths__, path__):
    FunProto(returnType, Identifier(name), params) -> <FunProto(
                                                         id
                                                       , Identifier(nam-annotate-def(|path__))
                                                       , id
                                                       )>

  adjust-index-def-data(store__|namespace__, path__):
    FunProto(returnType, Identifier(name), params) -> <store__> DefData(
                                                                  [namespace__|path__]
                                                                , Type()
                                                                , FunType(paramsTypes, returnType)
                                                                )
    where paramsTypes := <type-of> params

  type-of :
    FunProto(returnType, Identifier(name), params) -> FunType(paramsTypes, returnType)
    where paramsTypes := <type-of> params

  nam-unique :
    FunProto(returnType, Identifier(name), params) -> <id>
    where paramsTypes := <type-of> params


rules

  nam-get-uses-keys :
    FunctionCall(Identifier(f), _) -> [f]

  nam-get-uses :
    FunctionCall(Identifier(f), _) -> [(Function(), [f])]

  nam-annotate-names(|paths__, path__):
    FunctionCall(Identifier(f), _) -> <FunctionCall(
                                         Identifier(nam-annotate-use(|paths__, Function()))
                                       , id
                                       )>


rules

  nam-get-definition-keys :
    Param(type, Identifier(name)) -> [name]

  nam-get-definitions :
    Param(type, Identifier(name)) -> [(Variable(), [name])]

  nam-annotate-names(|paths__, path__):
    Param(type, Identifier(name)) -> <Param(id, Identifier(nam-annotate-def(|path__)))>

  adjust-index-def-data(store__|namespace__, path__):
    Param(type, Identifier(name)) -> <store__> DefData(
                                                 [namespace__|path__]
                                               , Type()
                                               , type
                                               )

  type-of :
    Param(type, Identifier(name)) -> type

  nam-unique :
    Param(type, Identifier(name)) -> <id>


rules

  nam-get-definition-keys :
    Declaration(
      type
    , Init(Identifier(name), _)
    ) -> [name]

  nam-get-definitions :
    Declaration(
      type
    , Init(Identifier(name), _)
    ) -> [(Variable(), [name])]

  nam-annotate-names(|paths__, path__):
    Declaration(
      type
    , Init(Identifier(name), _)
    ) -> <Declaration(
            id
          , Init(Identifier(nam-annotate-def(|path__)), id)
          )>

  adjust-index-def-data(store__|namespace__, path__):
    Declaration(
      type
    , Init(Identifier(name), _)
    ) -> <store__> DefData(
                     [namespace__|path__]
                   , Type()
                   , type
                   )

  type-of :
    Declaration(
      type
    , Init(Identifier(name), _)
    ) -> type

  nam-unique :
    Declaration(
      type
    , Init(Identifier(name), _)
    ) -> <id>


rules

  nam-get-definition-keys :
    Declaration(type, NoInit(Identifier(name))) -> [name]

  nam-get-definitions :
    Declaration(type, NoInit(Identifier(name))) -> [(Variable(), [name])]

  nam-annotate-names(|paths__, path__):
    Declaration(type, NoInit(Identifier(name))) -> <Declaration(
                                                      id
                                                    , NoInit(Identifier(nam-annotate-def(|path__)))
                                                    )>

  adjust-index-def-data(store__|namespace__, path__):
    Declaration(type, NoInit(Identifier(name))) -> <store__> DefData(
                                                               [namespace__|path__]
                                                             , Type()
                                                             , type
                                                             )

  type-of :
    Declaration(type, NoInit(Identifier(name))) -> type

  nam-unique :
    Declaration(type, NoInit(Identifier(name))) -> <id>


rules

  nam-get-definition-keys :
    Declaration(
      type
    , NoInit(Identifier(varName), size)
    ) -> [varName]

  nam-get-definitions :
    Declaration(
      type
    , NoInit(Identifier(varName), size)
    ) -> [(Variable(), [varName])]

  nam-annotate-names(|paths__, path__):
    Declaration(
      type
    , NoInit(Identifier(varName), size)
    ) -> <Declaration(
            id
          , NoInit(Identifier(nam-annotate-def(|path__)), id)
          )>

  adjust-index-def-data(store__|namespace__, path__):
    Declaration(
      type
    , NoInit(Identifier(varName), size)
    ) -> <store__> DefData(
                     [namespace__|path__]
                   , Type()
                   , type
                   )

  type-of :
    Declaration(
      type
    , NoInit(Identifier(varName), size)
    ) -> type

  nam-unique :
    Declaration(
      type
    , NoInit(Identifier(varName), size)
    ) -> <id>


rules

  nam-get-definition-keys :
    StructOrUnionInlineDecl(
      Struct(_, Identifier(s), _)
    , Identifier(name)
    ) -> [name]

  nam-get-definitions :
    StructOrUnionInlineDecl(
      Struct(_, Identifier(s), _)
    , Identifier(name)
    ) -> [(Variable(), [name])]

  nam-annotate-names(|paths__, path__):
    StructOrUnionInlineDecl(
      Struct(_, Identifier(s), _)
    , Identifier(name)
    ) -> <StructOrUnionInlineDecl(
            Struct(id, Identifier(id), id)
          , Identifier(nam-annotate-def(|path__))
          )>

  adjust-index-def-data(store__|namespace__, path__):
    StructOrUnionInlineDecl(
      Struct(_, Identifier(s), _)
    , Identifier(name)
    ) -> <store__> DefData(
                     [namespace__|path__]
                   , Type()
                   , StructType(Identifier(s))
                   )

  type-of :
    StructOrUnionInlineDecl(
      Struct(_, Identifier(s), _)
    , Identifier(name)
    ) -> StructType(Identifier(s))

  nam-unique :
    StructOrUnionInlineDecl(
      Struct(_, Identifier(s), _)
    , Identifier(name)
    ) -> <id>


rules

  nam-get-definition-keys :
    StructOrUnionInlineDecl(
      Struct(_, None(), _)
    , Identifier(name)
    ) -> [name]

  nam-get-definitions :
    StructOrUnionInlineDecl(
      Struct(_, None(), _)
    , Identifier(name)
    ) -> [(Variable(), [name])]

  nam-annotate-names(|paths__, path__):
    StructOrUnionInlineDecl(
      Struct(_, None(), _)
    , Identifier(name)
    ) -> <StructOrUnionInlineDecl(
            Struct(id, None(), id)
          , Identifier(nam-annotate-def(|path__))
          )>

  nam-unique :
    StructOrUnionInlineDecl(
      Struct(_, None(), _)
    , Identifier(name)
    ) -> <id>


rules

  nam-get-uses-keys :
    Var(Identifier(name)) -> [name]

  nam-get-uses :
    Var(Identifier(name)) -> [(Variable(), [name])]

  nam-annotate-names(|paths__, path__):
    Var(Identifier(name)) -> <Var(
                                Identifier(nam-annotate-use(|paths__, Variable()))
                              )>


rules

  nam-get-uses-keys :
    ArrayField(Var(Identifier(name)), _) -> [name]

  nam-get-uses :
    ArrayField(Var(Identifier(name)), _) -> [(Variable(), [name])]

  nam-annotate-names(|paths__, path__):
    ArrayField(Var(Identifier(name)), _) -> <ArrayField(
                                               Var(
                                                 Identifier(nam-annotate-use(|paths__, Variable()))
                                               )
                                             , id
                                             )>


rules

  nam-get-uses-keys :
    MListRef(Identifier(name)) -> [name]

  nam-get-uses :
    MListRef(Identifier(name)) -> [(Messagelist(), [name])]

  nam-annotate-names(|paths__, path__):
    MListRef(Identifier(name)) -> <MListRef(
                                     Identifier(nam-annotate-use(|paths__, Messagelist()))
                                   )>


rules

  nam-get-scope-types :
    Union(_, Identifier(u), _) -> [Field()]

  nam-get-definition-keys :
    Union(_, Identifier(u), _) -> [u]

  nam-get-definitions :
    Union(_, Identifier(u), _) -> [(Union(), [u])]

  nam-annotate-names(|paths__, path__):
    Union(_, Identifier(u), _) -> <Union(
                                     id
                                   , Identifier(nam-annotate-def(|path__))
                                   , id
                                   )>

  nam-unique :
    Union(_, Identifier(u), _) -> <id>


rules

  nam-get-scope-types :
    Struct(_, Identifier(s), _) -> [Field(), Struct()]

  nam-get-definition-keys :
    Struct(_, Identifier(s), _) -> [s]

  nam-get-definitions :
    Struct(_, Identifier(s), _) -> [(Struct(), [s])]

  nam-annotate-names(|paths__, path__):
    Struct(_, Identifier(s), _) -> <Struct(
                                      id
                                    , Identifier(nam-annotate-def(|path__))
                                    , id
                                    )>

  nam-unique :
    Struct(_, Identifier(s), _) -> <id>


rules

  nam-get-uses-keys :
    StructType(Identifier(s)) -> [s]

  nam-get-uses :
    StructType(Identifier(s)) -> [(Struct(), [s])]

  nam-annotate-names(|paths__, path__):
    StructType(Identifier(s)) -> <StructType(
                                    Identifier(nam-annotate-use(|paths__, Struct()))
                                  )>


rules

  nam-get-uses-keys :
    UnionType(Identifier(s)) -> [s]

  nam-get-uses :
    UnionType(Identifier(s)) -> [(Union(), [s])]

  nam-annotate-names(|paths__, path__):
    UnionType(Identifier(s)) -> <UnionType(
                                   Identifier(nam-annotate-use(|paths__, Union()))
                                 )>


rules

  nam-get-definition-keys :
    FieldDecl(t, Identifier(i)) -> [i]

  nam-get-definitions :
    FieldDecl(t, Identifier(i)) -> [(Field(), [i])]

  nam-annotate-names(|paths__, path__):
    FieldDecl(t, Identifier(i)) -> <FieldDecl(id, Identifier(nam-annotate-def(|path__)))>

  adjust-index-def-data(store__|namespace__, path__):
    FieldDecl(t, Identifier(i)) -> <store__> DefData(
                                               [namespace__|path__]
                                             , Type()
                                             , t
                                             )

  type-of :
    FieldDecl(t, Identifier(i)) -> t

  nam-unique :
    FieldDecl(t, Identifier(i)) -> <id>


rules

  nam-get-definition-keys :
    NestedStruct(
      Struct(_, Identifier(s), _)
    , Identifier(name)
    ) -> [name]

  nam-get-definitions :
    NestedStruct(
      Struct(_, Identifier(s), _)
    , Identifier(name)
    ) -> [(Field(), [name])]

  nam-annotate-names(|paths__, path__):
    NestedStruct(
      Struct(_, Identifier(s), _)
    , Identifier(name)
    ) -> <NestedStruct(
            Struct(id, Identifier(id), id)
          , Identifier(nam-annotate-def(|path__))
          )>

  adjust-index-def-data(store__|namespace__, path__):
    NestedStruct(
      Struct(_, Identifier(s), _)
    , Identifier(name)
    ) -> <store__> DefData(
                     [namespace__|path__]
                   , Type()
                   , StructType(Identifier(s))
                   )

  type-of :
    NestedStruct(
      Struct(_, Identifier(s), _)
    , Identifier(name)
    ) -> StructType(Identifier(s))

  nam-unique :
    NestedStruct(
      Struct(_, Identifier(s), _)
    , Identifier(name)
    ) -> <id>


rules

  nam-get-uses-keys :
    Field(e, Identifier(field)) -> [field]
    where StructType(Identifier(s)) := <type-of> e

  nam-get-uses :
    Field(e, Identifier(field)) -> [(Field(), [field])]
    where StructType(Identifier(s)) := <type-of> e

  nam-annotate-names(|paths__, path__):
    Field(e, Identifier(field)) -> <Field(
                                      id
                                    , Identifier(nam-annotate-use(|paths__, Field()))
                                    )>

  adjust-index-lookup(target__|namespace__, path__, prefix__):
    Field(e, Identifier(field)) -> <index-lookup-children(|Field(), prefix__)> s
    where <target__> field
    where StructType(Identifier(s)) := <type-of> e


rules

  nam-get-uses-keys :
    FieldViaPointer(e, Identifier(field)) -> [field]
    where Pointer(StructType(Identifier(s))) := <type-of> e

  nam-get-uses :
    FieldViaPointer(e, Identifier(field)) -> [(Field(), [field])]
    where Pointer(StructType(Identifier(s))) := <type-of> e

  nam-annotate-names(|paths__, path__):
    FieldViaPointer(e, Identifier(field)) -> <FieldViaPointer(
                                                id
                                              , Identifier(nam-annotate-use(|paths__, Field()))
                                              )>

  adjust-index-lookup(target__|namespace__, path__, prefix__):
    FieldViaPointer(e, Identifier(field)) -> <index-lookup-children(|Field(), prefix__)> s
    where <target__> field
    where Pointer(StructType(Identifier(s))) := <type-of> e


rules

  nam-get-definition-keys :
    TypedefDecl(type, Identifier(name)) -> [name]

  nam-get-definitions :
    TypedefDecl(type, Identifier(name)) -> [(TypeSynonym(), [name])]

  nam-annotate-names(|paths__, path__):
    TypedefDecl(type, Identifier(name)) -> <TypedefDecl(id, Identifier(nam-annotate-def(|path__)))>

  adjust-index-def-data(store__|namespace__, path__):
    TypedefDecl(type, Identifier(name)) -> <store__> DefData(
                                                       [namespace__|path__]
                                                     , Type()
                                                     , type
                                                     )

  type-of :
    TypedefDecl(type, Identifier(name)) -> type

  nam-unique :
    TypedefDecl(type, Identifier(name)) -> <id>


rules

  nam-get-uses-keys :
    TypeSynonym(Identifier(name)) -> [name]

  nam-get-uses :
    TypeSynonym(Identifier(name)) -> [ (TypeSynonym(), [name])
                                     , (Struct(), [name])
                                     , (Union(), [name])
                                     , (Enum(), [name])
                                     , (Statemachine(), [name])
                                     ]

  nam-annotate-names(|paths__, path__):
    TypeSynonym(Identifier(name)) -> <TypeSynonym(
                                        Identifier(nam-annotate-use(|paths__, TypeSynonym()))
                                      )>

  adjust-index-lookup(target__|namespace__, path__, prefix__):
    TypeSynonym(Identifier(name)) -> [ [TypeSynonym()|path__]
                                     , [Struct()|path__]
                                     , [Union()|path__]
                                     , [Enum()|path__]
                                     , [Statemachine()|path__]
                                     ]
    where <target__> name


rules

  nam-get-definition-keys :
    Enum(_, Identifier(name), _) -> [name]

  nam-get-definitions :
    Enum(_, Identifier(name), _) -> [(Enum(), [name])]

  nam-annotate-names(|paths__, path__):
    Enum(_, Identifier(name), _) -> <Enum(
                                       id
                                     , Identifier(nam-annotate-def(|path__))
                                     , id
                                     )>

  adjust-index-def-data(store__|namespace__, path__):
    Enum(_, Identifier(name), _) -> <store__> DefData(
                                                [namespace__|path__]
                                              , Type()
                                              , BasicType("int8")
                                              )

  type-of :
    Enum(_, Identifier(name), _) -> BasicType("int8")

  nam-unique :
    Enum(_, Identifier(name), _) -> <id>


rules

  nam-get-uses-keys :
    EnumType(Identifier(name)) -> [name]

  nam-get-uses :
    EnumType(Identifier(name)) -> [(Enum(), [name])]

  nam-annotate-names(|paths__, path__):
    EnumType(Identifier(name)) -> <EnumType(
                                     Identifier(nam-annotate-use(|paths__, Enum()))
                                   )>


rules

  nam-get-definition-keys :
    Label(l, _) -> [l]

  nam-get-definitions :
    Label(l, _) -> [(Label(), [l])]

  nam-annotate-names(|paths__, path__):
    Label(l, _) -> <Label(nam-annotate-def(|path__), id)>

  nam-unique :
    Label(l, _) -> <id>


rules

  nam-get-uses-keys :
    Goto(l) -> [l]

  nam-get-uses :
    Goto(l) -> [(Label(), [l])]

  nam-annotate-names(|paths__, path__):
    Goto(l) -> <Goto(nam-annotate-use(|paths__, Label()))>


rules

  nam-get-scope-types :
    MessageList(_, Identifier(name), _) -> [Message()]

  nam-get-definition-keys :
    MessageList(_, Identifier(name), _) -> [name]

  nam-get-definitions :
    MessageList(_, Identifier(name), _) -> [(Messagelist(), [name])]

  nam-annotate-names(|paths__, path__):
    MessageList(_, Identifier(name), _) -> <MessageList(
                                              id
                                            , Identifier(nam-annotate-def(|path__))
                                            , id
                                            )>

  adjust-index-def-data(store__|namespace__, path__):
    MessageList(_, Identifier(name), _) -> <store__> DefData(
                                                       [namespace__|path__]
                                                     , Type()
                                                     , MsgListType(Identifier(name))
                                                     )

  type-of :
    MessageList(_, Identifier(name), _) -> MsgListType(Identifier(name))

  nam-unique :
    MessageList(_, Identifier(name), _) -> <id>


rules

  nam-get-definition-keys :
    Message(Identifier(name), _, _, _) -> [name]

  nam-get-definitions :
    Message(Identifier(name), _, _, _) -> [(Message(), [name])]

  nam-annotate-names(|paths__, path__):
    Message(Identifier(name), _, _, _) -> <Message(
                                             Identifier(nam-annotate-def(|path__))
                                           , id
                                           , id
                                           , id
                                           )>

  nam-unique :
    Message(Identifier(name), _, _, _) -> <id>


rules

  nam-get-uses-keys :
    Report(var, Identifier(msg)) -> [msg]
    where MsgListType(Identifier(mList)) := <type-of> var

  nam-get-uses :
    Report(var, Identifier(msg)) -> [(Message(), [msg])]
    where MsgListType(Identifier(mList)) := <type-of> var

  nam-annotate-names(|paths__, path__):
    Report(var, Identifier(msg)) -> <Report(
                                       id
                                     , Identifier(nam-annotate-use(|paths__, Message()))
                                     )>

  adjust-index-lookup(target__|namespace__, path__, prefix__):
    Report(var, Identifier(msg)) -> <index-lookup-children(|Message(), prefix__)> mList
    where <target__> msg
    where MsgListType(Identifier(mList)) := <type-of> var