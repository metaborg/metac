module BaseC/trans/naming/names

imports
	include/metaC
	baseC/trans/typing/types
	
namespaces
	Module
	Import
	Function
	Variable
	Label 
	Field
	Struct
	Union
	Enum
	Enumlit
	Messagelist
	Message
	TypeSynonym
	Statemachine

//TODO: fix namebinding, refers to doesnt work for variables and fields (it does work for functions)
rules
	// modules
	Module(Identifier(name), _, _):
		defines Module name
		scopes Function, Struct, Enum, Variable, Union, Messagelist, TypeSynonym, Statemachine
		
	Import(Identifier(name)):
		//defines non-unique Import name
		refers to Module name
		imports Function from Module name
		imports Struct from Module name
		
	
	// functions
	FunDef(_,returnType, Identifier(name), params,_):
		defines Function name of type FunType(paramsTypes,returnType)
		scopes Variable, TypeSynonym
		where
			params has type paramsTypes
	
	FunctionCall(Identifier(f),_): 
		refers to Function f


	// variables
	
	Param(type,Identifier(name)):
		defines Variable name of type type
	
	Declaration(type, Init(Identifier(name), _)):
		defines Variable name of type type //in subsequent scope				// currently commented because it causes unexpected problems
	//	where
	//		typ has type t 
	
	Declaration(type, NoInit(Identifier(name))):
		defines Variable name of type type //in subsequent scope				// currently commented because it causes unexpected problems
	//	where 
	//		typ has type t
		
	StructOrUnionInlineDecl(Struct(_, Identifier(s), _), Identifier(name)):
		defines Variable name of type StructType(Identifier(s))
	
	StructOrUnionInlineDecl(Struct(_, None(), _), Identifier(name)):
		defines Variable name 													//TODO add type
	
	Var(Identifier(name)):
		refers to Variable name
		
	MListRef(Identifier(name)):
		refers to Messagelist name
	
	// structs and unions
	Union(_, Identifier(u), _):
		defines unique Union u 
		scopes Field
		
	Struct(_, Identifier(s), _):
		defines unique Struct s //of type StructType(Identifier(s))		//remove later?
		scopes Field, Struct
	
	StructType(Identifier(s)):
		refers to Struct s
		
	UnionType(Identifier(s)):
		refers to Union s
	
	FieldDecl(t, Identifier(i)):
		defines Field i of type t
	
	NestedStruct(Struct(_, Identifier(s), _), Identifier(name)):
		defines Field name of type StructType(Identifier(s))
	
	Field(e, Identifier(field)):  
		refers to Field field in Union s
		where 
			e has type StructType(Identifier(s))
	
	FieldViaPointer(e, Identifier(field)):
		refers to Field field in Union s
		where
			e has type Pointer(StructType(Identifier(s)))
	
	TypedefDecl(type, Identifier(name)):
		defines TypeSynonym name of type type
		
	TypeSynonym(Identifier(name)):
		refers to TypeSynonym name
		refers to Struct name										//figure out another way?
		refers to Union name
		refers to Enum name
		
	Enum(_, Identifier(name), _):
		defines Enum name of type BasicType("int8")					//modify to other types of int ?
		
	EnumType(Identifier(name)):
		refers to Enum name
	
	// labels and gotos	
	Label(l, _): 
		defines Label l
	Goto(l): 
		refers to Label l


	// message lists and messages
	MessageList(_, Identifier(name), _):
		defines unique Messagelist name of type MsgListType(Identifier(name))
		scopes Message
		
	Message(Identifier(name), _, _, _):
 		defines Message name
 		
 	Report(var, Identifier(msg)):
 		refers to Message msg in Messagelist mList
 		where
 			var has type MsgListType(Identifier(mList))


