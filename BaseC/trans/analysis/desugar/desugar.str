module BaseC/trans/analysis/desugar/desugar

imports
	include/MetaC
	libstratego-lib
	lib/editor-common.generated
	lib/index/-
	lib/analysis/-
	lib/nabl/-
	BaseC/trans/analysis/desugar/constructors

	
rules
	desugar-all = bottomup(try(desugar);try(flatten-list))
	desugar-after-all = bottomup(try(preserve-annotation(desugar-after));try(flatten-list))
	
	//remove all the Some() constructors
	desugar: Some(a) -> a
	
	// desugars single declaration that declares multiple variables to multiple declarations
	desugar: Declaration(type, vars) -> declarationList
		where
			declarationList := <map(declaration-pairwith(|type))>vars
	
	declaration-pairwith(|type): var -> <try(desugar-decl)> Declaration(type, var)
	
	desugar-decl: Declaration(t, NoInit(decl)) -> Declaration(type, NoInit(name))
	where
		ntype:= <try(desugar-type)> t;
		type:= <desugar-type(|ntype)> decl;
		[name]:= <collect(?Identifier(_))> decl
	
	desugar-decl: Declaration(t, Init(decl, init)) -> Declaration(type, Init(name, init))
	where
		ntype:= <try(desugar-type)> t;
		type:= <desugar-type(|ntype)> decl;
		[name]:= <collect(?Identifier(_))> decl
	
	desugar-type(|t): Decl(plist, _) -> <desugar-type(|t)> plist
	
	desugar-type(|t): PointerOfList([head | tail]) -> type
	where 
		PointerOf(mod):= head;
		type:= <desugar-type(|Type(mod, Pointer(t)))> PointerOfList(tail)
	
	desugar-type(|t): PointerOfList([]) -> t
		
	desugar-type(|t): ArrayDecl(plist, name, postfixList) -> type
	where
		ptype:= <desugar-type(|t)> plist;
		type:= <desugar-type(|ptype)> postfixList
		
	desugar-type(|t): PostfixDeclList(list) -> type
	where
		PostfixDecl(size):= <last> list;
		nlist:= <take(| <subti> (<length> list, 1))> list;
		type:= <desugar-type(|Type([], Array(t, size)))> PostfixDeclList(nlist)
		
	desugar-type(|t): PostfixDeclList([]) -> t		
	
	desugar-type: Type(mod, array) -> type
	where
		 list:= <to-postfixDecl(|[]); debug(!"postfixList: ")> array;
		 [t | postfixList]:= list;
		 type:= <debug(!"type: ")><desugar-type(|Type(mod, t))> PostfixDeclList(postfixList)
	
	to-postfixDecl(|p): Array(t, s) -> slist
	where
		slist:= <to-postfixDecl(|[PostfixDecl(s)|p])> t
	<+  slist:= [t, PostfixDecl(s)|p]
	
	desugar: FunDef(exported, t, decl, params, statements) -> FunDef(exported, type, name, params, statements)
	where
		ntype:= <try(desugar-type)> t;
		type:= <desugar-type(|ntype)> decl;
		[name]:= <collect(?Identifier(_))> decl
	
	desugar: Param(t, decl) -> Param(type, name)
	where
		ntype:= <try(desugar-type)> t; 
		type:= <desugar-type(|ntype)> decl;
		[name]:= <collect(?Identifier(_))> decl
	
	desugar: FieldDecl(type, vars) -> declarationList
		where
			declarationList := <map(fieldDecl-pairwith(|type))>vars
	
	fieldDecl-pairwith(|type): var -> FieldDecl(type, var)
			
	desugar: Negative(Decimal(val)) -> Decimal($[-[val]])
	
	desugar: Binary(<id>) -> <ltrim-chars(?'0'); ltrim-chars(?'b'); bin-string-to-int; !Decimal(<id>)>					//needed because there is no def of binary in the c syntax
	
	desugar: Octal(<id>) -> <oct-string-to-int; !Decimal(<id>)>
	
	desugar: Hexadecimal(<id>)-> <ltrim-chars(?'0'); ltrim-chars(?'X'<+?'x'); hex-string-to-int; !Decimal(<id>)>
		
	//desugar: PointerType(type, modifiers) -> Type(modifiers, Pointer(type))
	
	desugar: FunPointerType(modifiers, paramTypes, returnType) -> Type(modifiers, FunctionPointer(paramTypes, <try(desugar-type)> returnType))
		
	desugar-type = ?None(); !Type([], Void())
	
	desugar: For(
		[Declaration(type, Init(varName, value))],
		cond,
		postIterInstr,
		loopBody) ->
				Block([Declaration(type, NoInit(varName)),
					For(Assign(varName, Assign(), value), cond, postIterInstr, loopBody)])
	
	desugar-after: Type(mod, String()) -> Type([], Pointer(Type(mod, Int8())))
	
	/**
	 * Expressions
	 */

	desugar: TypeConversion(t, plist, exp) -> TypeConversion(type, exp)
	where
		type:= <desugar-type(|t)> plist
	
	desugar-after: Addition(e1, e2) 			-> 	BinExp(Plus(), e1, e2)
	desugar-after: Subtraction(e1, e2)		-> 	BinExp(Minus(), e1, e2)
	desugar-after: Division(e1, e2) 			-> 	BinExp(Div(), e1, e2)
	desugar-after: Modulo(e1, e2) 			-> 	BinExp(Mod(), e1, e2)
	desugar-after: Multiplication(e1, e2) 	-> 	BinExp(Mul(), e1, e2)
	
	desugar-after: Or(e1, e2) 				-> 	BinExp(LogicOr(), e1, e2)
	desugar-after: And(e1, e2) 				-> 	BinExp(LogicAnd(), e1, e2)

	desugar-after: BitwiseOr(e1, e2) 			-> 	BinExp(BWOr(), e1, e2)
	desugar-after: BitwiseXor(e1, e2) 		-> 	BinExp(BWXor(), e1, e2)
	desugar-after: BitwiseAnd(e1, e2) 		-> 	BinExp(BWAnd(), e1, e2)
	desugar-after: Inequal(e1, e2) 			-> 	BinExp(NotEq(), e1, e2)
	desugar-after: Equal(e1, e2) 				-> 	BinExp(Eq(), e1, e2)
	desugar-after: GreaterThanEqual(e1, e2) 	-> 	BinExp(GTE(), e1, e2)
	desugar-after: GreaterThan(e1, e2) 		-> 	BinExp(GT(), e1, e2)
	desugar-after: LessThanEqual(e1, e2) 		-> 	BinExp(LTE(), e1, e2)
	desugar-after: LessThan(e1, e2) 			-> 	BinExp(LT(), e1, e2)
	desugar-after: BitshiftRight(e1, e2) 		-> 	BinExp(BitshiftR(), e1, e2)
	desugar-after: BitshiftLeft(e1, e2) 		-> 	BinExp(BitshiftL(), e1, e2)
 
 	desugar-after: SizeOf(e1)					->  UnExp(Size(), e1)
 	desugar-after: Address(e1)				->  UnExp(Addr(), e1)
 	desugar-after: Dereference(e1)			->  UnExp(Deref(), e1)
 	desugar-after: BitwiseComplement(e1)		->  UnExp(BWCompl(), e1)
 	desugar-after: Not(e1)					->  UnExp(LogicalNot(), e1)
 	desugar-after: Negative(e1)				->  UnExp(Neg(), e1)
 	desugar-after: Positive(e1)				->  UnExp(Pos(), e1)
 	desugar-after: DecrementPrefix(e1)		->  UnExp(DecPre(), e1)
 	desugar-after: IncrementPrefix(e1)		->  UnExp(IncPre(), e1)
 	desugar-after: DecrementPostfix(e1)		->  UnExp(DecPost(), e1)
 	desugar-after: IncrementPostfix(e1)		->  UnExp(IncPost(), e1)
 	