
templates

// ====================================================================
// Variables
// ====================================================================
Exp.Var = <<Identifier>>
Exp = <<Constant>>


// ====================================================================
// Operators
// @see http://www.difranco.net/compsci/C_Operator_Precedence_Table.htm
// The operators are ordered in preceding order, one empty line between
// precedence groups.
// ====================================================================
Exp = 					<(<Exp>)> {bracket}
//TODO: function calls
Exp.ArrayField = 		<<Exp> [ <Exp> ]>
Exp.Field = 			<<Exp> . <Exp> >
Exp.FieldViaPointer =	<<Exp> -\> <Exp> >
Exp.IncrementPostfix =	<<Exp> ++> {left}
Exp.DecrementPostfix =	<<Exp> --> {left}

Exp.IncrementPrefix =	<++ <Exp>> {right}
Exp.DecrementPrefix =	<-- <Exp>> {right}
Exp.Positive =			<+ <Exp>> {right}
Exp.Negative =			<- <Exp>> {right}
Exp.Not =				<! <Exp>> {right}
Exp.BitwiseComplement =	<~ <Exp>> {right}
//TODO: (type) typeconversion
Exp.Dereference = 		<* <Exp>> {right}
Exp.Address = 			<& <Exp>> {right}
Exp.SizeOf = 			<sizeof <Exp>> {right}

Exp.Multiplication =	<<Exp> * <Exp>> {left}
Exp.Division =			<<Exp> \ <Exp>> {left}
Exp.Modulo =			<<Exp> % <Exp>> {left}

Exp.Addition =			<<Exp> + <Exp>> {left}
Exp.Subtraction =		<<Exp> - <Exp>> {left}

Exp.BitshiftLeft =		<<Exp> \<\< <Exp>> {left}
Exp.BitshiftRight =		<<Exp> \>\> <Exp>> {left}

Exp.LessThan = 			<<Exp> \< <Exp>> {left}
Exp.LessThanEqual =		<<Exp> \<= <Exp>> {left}
Exp.GreaterThan = 		<<Exp> \> <Exp>> {left}
Exp.GreaterThanEqual =	<<Exp> \>= <Exp>> {left}

Exp.Equal =				<<Exp> == <Exp>> {left}
Exp.Inequal =			<<Exp> != <Exp>> {left}

Exp.BitwiseAnd = 		<<Exp> & <Exp>> {left}

Exp.BitwiseXor = 		<<Exp> ^ <Exp>> {left}

Exp.BitwiseOr =			<<Exp> | <Exp>> {left}

Exp.And = 				<<Exp> && <Exp>> {left}

Exp.Or = 				<<Exp> || <Exp>> {left}

Exp.TernaryConditional =<<Exp> ? <Exp> : <Exp>> {right}

Exp.Assign = 			<<Identifier> <AssignOp> <Exp>> {right}
AssignOp.Assign = 				<=>
AssignOp.PlusAssign = 			<+=>
AssignOp.MinusAssign = 			<-=>
AssignOp.MultiplyAssign = 		<*=>
AssignOp.DivisionAssign = 		</=>
AssignOp.ModuloAssign = 		<%=>
AssignOp.BitwiseAndAssign = 	<&=>
AssignOp.BitwiseXorAssign = 	<^=>
AssignOp.BitwiseOrAssign =		<|=>
AssignOp.BitshiftLeftAssign =	<\<\<=>
AssignOp.BitshiftRightAssign =	<\>\>=>

//TODO: comma-expressions (in a diff construct because diff use)

template options
context-free priorities
{
	"(" Exp ")"         -> Exp	//Old notation, because of no constructor
} >
{ left:
	Exp.ArrayField
	Exp.Field
	Exp.FieldViaPointer
	Exp.IncrementPostfix
	Exp.DecrementPostfix
} >
{ right:
	Exp.IncrementPrefix
	Exp.DecrementPrefix
	Exp.Positive
	Exp.Negative
	Exp.Not
	Exp.BitwiseComplement
	//TODO: (type) typeconversion
	Exp.Dereference
	Exp.Address
	Exp.SizeOf
} >
{ left:
	Exp.Multiplication
	Exp.Division
	Exp.Modulo
} >
{ left:
	Exp.Addition
	Exp.Subtraction
} >
{ left:
	Exp.BitshiftLeft
	Exp.BitshiftRight
} >
{ left:
	Exp.LessThan
	Exp.LessThanEqual
	Exp.GreaterThan
	Exp.GreaterThanEqual
} >
{ left:
	Exp.Equal
	Exp.Inequal
} >
{
    Exp.BitwiseAnd
} >
{
    Exp.BitwiseXor
} >
{
    Exp.BitwiseOr
} >
{
    Exp.And
} >
{
    Exp.Or
} >
{
    Exp.TernaryConditional
} >
{
	Exp.Assign
}


lexical restrictions
    "+" -/- [\+]
    "-" -/- [\-]
    "&" -/- [\&]
