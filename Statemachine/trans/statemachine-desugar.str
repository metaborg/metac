module Statemachine/trans/statemachine-desugar

imports
	include/metaC
	lib/nbl-library.generated
	libstratego-lib
	lib/editor-common.generated
	lib/index-library.generated
	lib/analysis-library.generated
	lib/analysis-library-internal.generated
	Statemachine/trans/Statemachine-mapping
	BaseC/trans/desugaring/desugar
	BaseC/trans/desugaring/constructors
	
rules
	
	//desugar: Statemachine(statemachineID, init, components*) -> <map(desugar-all)> <to-basec> stmachine 
	//	where
	//		stmachine := Statemachine(statemachineID, init, components*)
	//desugar: Statemachine(statemachineID, init, components) -> <to-basec> Statemachine(statemachineID, init, components)
	
	//collect-import: Statemachine(Identifier(name), _, _) -> name
	
/*	collect-import: term -> list
	where
		Statemachine(Identifier(name), _, _):= <debug(!"term: ")>term;
		list:= [name] <+ list:= []
*/
	 
/*	collect-import: Statemachine(Identifier(name), _, _) -> name
	
	collect-import-all = collect(collect-import)
	
	get-sm-import: name -> Import(Identifier($[[name]__sm]))
	
	desugar: Module(name, Some(list), body) -> Module(name, smImports, body)
	where
		smIds:= <collect-import-all; map(get-sm-import)> body;
		smImports := [list | smIds]
	
	desugar: Module(name, None(), body) -> Module(name, smIds, body)
	where
		smIds:= <collect-import-all; map(get-sm-import)> body;
		not (<eq>(0, <length> smIds))	
*/

	desugar: amb([Exp(_), StateMachineInit(name)]) ->StateMachineInit(name)
	
	desugar: amb([StateMachineInit(name), Exp(_)]) ->StateMachineInit(name)
	
	desugar: amb([Exp(_), StateMachineTrigger(e1, e2)]) ->StateMachineTrigger(e1, e2)
	
	desugar: amb([StateMachineTrigger(e1, e2), Exp(_)]) ->StateMachineTrigger(e1, e2)