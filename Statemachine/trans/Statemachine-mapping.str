module Statemachine-mapping

imports MetaC
imports include/MetaC
		lib/nbl-library.generated
		libstratego-lib
		lib/editor-common.generated
		lib/index-library.generated
		lib/analysis-library.generated
		lib/analysis-library-internal.generated
		lib/c/c
		libstratego-gpp
		Statemachine/trans/statemachine-names
		BaseC/trans/desugaring/desugar
		BaseC/trans/desugaring/constructors
		BaseC/trans/generation/to-c
		BaseC/trans/generation/generate

signature constructors
	SmParamDef : Type * String -> Param
	SmEvtParamList : List(UriPart) * Param -> Param
	EvtParamList : DefDataType
	BoundFun : DefDataType
	
rules
	
	to-basec-all = topdown(try(to-basec);try(flatten-list))
	
	to-basec-all(|path): ast -> ast												//generates .h file with C code statemachine functions, enums and structs.
	where 
		(basecAST, _):= <topdown(try(to-basec);try(flatten-list))> ast;
		smPath:= $[[<remove-extension> path]__sm.mc];
		filename := <guarantee-extension(|"h")> smPath;
		result   := <desugar-all;to-c;pp-c-string> basecAST;
		<write-file> (filename, result)
	
	//to-basec: [Statemachine(ident, init, comp)] -> <to-basec> Statemachine(ident, init, comp)
	
	get-module: smName -> parent
	where
		[_, _, parent | tail]:= <index-uri> smName
	
	to-basec: Statemachine(Identifier(statemachineID), initial, components*) -> [headerAST, initFunction, executeFunction] //(headerModule, executeFunction, initFunction)		//TODO: change to generate header file(including initFunction?) and output only executeFunction 
	where
		moduleName := <get-module> statemachineID;
		<collect-components(|statemachineID)> components* => (states_out, events_out, vars_out)
		;<generate-statemachine-header(|moduleName, statemachineID)> (states_out, events_out, vars_out) => headerAST;
		<generate-sm-basec-function(|moduleName, statemachineID)> states_out => executeFunction;
		<generate-sm-basec-init(|moduleName, statemachineID, initial)> vars_out => initFunction
		//;SmModule:= Module(Identifier($[[moduleName]Header]), None(), [headerAST, initFunction, executeFunction])          
		
		
	collect-components(|statemachineID): componentList* -> (states, events, vars)
	where
		not(<eq> (0, <length> componentList*));	 	
	 	states:= <collect-states(|statemachineID)> componentList*;
	 	events:= <collect-events(|statemachineID)> componentList*;
	 	vars:= <collect-vars> componentList*
	
	
	collect-states(|statemachineID): componentList* -> states
	where
		not(<eq> (0, <length> componentList*));
		states:= <mapconcat(try(collect-state(|statemachineID)))>
		
	collect-state(|statemachineID): component -> out//<debug(!"state: ")>out		
	where
		newComponent:= <expand-state-name(|statemachineID)> component;
		out:= [newComponent] <+
		out:= []
	
	collect-events(|statemachineID): componentList* -> events
	where
		not(<eq> (0, <length> componentList*));
		events:= <mapconcat(try(collect-event(|statemachineID)))>
		
	collect-event(|statemachineID): component -> out//<debug(!"event: ")>out
	where
		newComponent:= <expand-event-name(|statemachineID)> component;
		out:= [newComponent] <+
		out:= []
		
	collect-vars: componentList* -> vars
	where
		not(<eq> (0, <length> componentList*));
		vars:= <mapconcat(try(collect-var))>
		
	collect-var: component -> out//<debug(!"var: ")> out
	where
		StateMachineVarDecl(_, _, _, _):= component;
		out:= [component] <+
		out:= []
	
	generate-statemachine-header(|moduleName, statemachineID ): (states, events, vars) -> headerAST//Module($[[moduleName]Header], None(), headerAST)          //add module imports
	where
		events_enumID:= $[[moduleName]_sm_events_[statemachineID]];
		states_enumID:= $[[moduleName]_sm_states_[statemachineID]];
		vars_structID:= $[[moduleName]_sm_data_[statemachineID]];
		events_enum:= <generate-sm-basec-enum(|statemachineID)> (events_enumID, events);		
		states_enum:= <generate-sm-basec-enum(|statemachineID)> (states_enumID, states);
		vars_struct:= <generate-sm-basec-struct(|statemachineID)> (vars_structID, vars);
		
		Struct(exported, _, structList):= vars_struct;
		structList2:= [FieldDecl(EnumType(Identifier(states_enumID)), Identifier("__currentState"))|structList];												
		vars_struct2:= Struct(exported, Identifier(vars_structID), structList2);
		
		smFunctionPrototype := [];										//TODO if generating sm header
		headerAST:= [events_enum, states_enum, vars_struct2]
	
		
	generate-sm-basec-enum(|statemachineID): (enumID, componentList) -> Enum(Exported(), Identifier(enumID), enumList)
	where
		exported := "exported";
		enumList:= <mapconcat(try(generate-sm-basec-enumElement(|statemachineID)))> componentList
	
	generate-sm-basec-enumElement(|statemachineID): StateMachineInEvent(event_name, _) -> [EnumItem(Identifier(event_name))]
	
	generate-sm-basec-enumElement(|statemachineID): StateMachineOutEvent(_, _, _) -> []
	
	generate-sm-basec-enumElement(|statemachineID): StateMachineState(state_name, _) -> [EnumItem(Identifier(state_name))]
	
	generate-sm-basec-struct(|statemachineID): (structID, componentList) -> Struct(Exported(), Identifier(structID), structList)
	where
		structList:= <mapconcat(try(generate-sm-basec-structElement(|statemachineID)))> componentList
		
	generate-sm-basec-structElement(|statemachineID): StateMachineVarDecl(_, type, name, _) -> [element]
	where
		element:= FieldDecl(type, [name])
		//////******
		
	generate-sm-basec-function(|moduleName, statemachineID): statesList -> smFunctionAST
	where
		functionName:= $[[moduleName]_sm_execute_[statemachineID]];
		stateCaseList:= <map(generate-sm-basec-stateCase(|statemachineID, statesList))> statesList;
		stateSwitch:= Switch(FieldViaPointer(Var(Identifier("instance")), Identifier("__currentState")), Block(stateCaseList));				
		//smFunctionBlock:= Block([stateSwitch]);
		smFunctionBlock := [stateSwitch];
		smFunctionParams := <generate-sm-basec-function-params> (moduleName, statemachineID);			
		smFunctionAST := FunDef(None(), BasicType("void"), Identifier(functionName), ParamList(smFunctionParams), smFunctionBlock)							
	
	generate-sm-basec-function-params: (moduleName, statemachineID) -> paramList 
	where
		instance:= Param(Pointer(StructType(Identifier($[[moduleName]_sm_data_[statemachineID]]))), Identifier("instance"));			
		event:= Param(EnumType(Identifier($[[moduleName]_sm_events_[statemachineID]])), Identifier("event"));
		arguments:= Param(Pointer(Pointer(BasicType("void"))), Identifier("arguments"));					
		paramList:= [instance, event, arguments]
	
	generate-sm-basec-stateCase(|statemachineID, statesList): StateMachineState(stateID, stateBody*) -> stateCaseStatement
	where
		//case stateID
		//switch event
		transitionEvents:= <collect(get-sm-event-from-transition)> stateBody*;
		//eventCaseList:= <mapconcat(generate-sm-basec-eventCase(|statemachineID, statesList, stateID))> stateBody*;				//can contain duplicates!!
		eventCaseList:= <mapconcat(generate-sm-basec-eventCase(|statemachineID, statesList, stateID, stateBody*))> transitionEvents;
		
		eventSwitch:= Switch(Var(Identifier("event")), Block(eventCaseList));						
		
		stateCaseStatement := Case(Var(Identifier(stateID)), Block([eventSwitch, Break()]))			
	
	get-sm-event-from-transition: StateTransition(Identifier(eventID), _, _, _) -> eventID
	
	generate-sm-basec-eventCase(|statemachineID, statesList, currentStateID, stateBody*): eventID -> [Case(Var(Identifier(<expand-event-nameString(|statemachineID)>eventID)), Block([ifStatements, Break()]))]
	where
		ifStatements:= <mapconcat(generate-sm-basec-eventIf(|statemachineID, statesList, currentStateID, eventID)); flatten-list> stateBody* 
	
	/*	case eventID
	 *	generate if condition
	 *	generate exit from current state
	 *	generate transitionActions
	 *	generate switchState
	 *	generate entry statements for targetState
	 *	return;
	*/
	//TODO refactor: remove unbox mess
	generate-sm-basec-eventIf(|statemachineID, statesList, currentStateID, evt): StateTransition(Identifier(eventID), condition, Identifier(targetStateName), transitionActions) -> [ifStatement]//[eventCaseStatement]
	where
	 	//<debug(!"generate if:")> (evt, eventID);
	 	<eq> (evt, eventID);
	 	targetStateID := <expand-state-nameString(|statemachineID)> targetStateName;
	 	//conditionStatement:= <debug(!"beforeTRANS:");get-transition-conditionStatement> condition;										//generate if condition
	 	conditionStatement:= <topdown(try(to-basec(|eventID)))>condition;								
	 	exitStatements* := <mapconcat(try(get-sm-stateExit-statements(|currentStateID)))> statesList;			//generate exit from current state
		//transitionStatements*:= <debug(!"beforeTRANS:");get-transitionStatements;debug(!"transitionSTM:")> transitionActions;									//generate transitionActions: 
	 	transitionStatements* := [<topdown(try(to-basec(|eventID)))>transitionActions];
	 	switchStateStatement*:= [Block([Exp(Some(Assign(FieldViaPointer(Var(Identifier("instance")),Identifier("__currentState")), Assign(), Var(Identifier(targetStateID)))))])];		//generate switchState
	 	entryStatements*:= <mapconcat(try(get-sm-stateEntry-statements(|targetStateID)))> statesList;			//generate entry statements for targetState
	 	//basecReturnStatement*:= [Block([Return(None())])];
	 	basecReturnStatement*:= [Block([Return(Decimal(-1))])];

	 	ifBody:= <mapconcat(try(unbox-block))> [exitStatements*, transitionStatements*, switchStateStatement*, entryStatements*, basecReturnStatement*];
	 	ifStatement:= <generate-sm-basec-ifStatement> (conditionStatement, ifBody)
	 	//;eventCaseStatement:= Case(Var(Identifier(<expand-event-nameString(|statemachineID)>eventID)), Block([ifStatement, Break()]))
		<+ 
		ifStatement:= []
		
	generate-sm-basec-eventIf(|statemachineID, statesList, currentStateID, evt): StateEntry(_) -> []
	
	generate-sm-basec-eventIf(|statemachineID, statesList, currentStateID, evt): StateExit(_) -> []
	
	
	get-sm-stateExit-statements(|stateName): StateMachineState(stateID, stateBody) -> statementBlock
	where
		<eq> (stateName, stateID);
		StateExit(stmBlock) := <fetch-elem(get-stateExit-block)> stateBody;
		statementBlock:= [<stm-to-basec> stmBlock] <+
		statementBlock:= []		
	
	get-sm-stateEntry-statements(|stateName): StateMachineState(stateID, stateBody) -> statementBlock
	where
		<eq> (stateName, stateID);
		//get stateEntry statements
		StateEntry(stmBlock) := <fetch-elem(get-stateEntry-block)> stateBody; 
		statementBlock:= [<stm-to-basec> stmBlock] <+
		statementBlock:= []
		
	
	get-stateEntry-block: StateEntry(statementBlock) -> StateEntry(statementBlock)
	
	get-stateExit-block: StateExit(statementBlock) -> StateExit(statementBlock)
	
	get-transitionStatements: None() -> []
	
	get-transitionStatements: Some(StatementBlock) -> [basecBlock]
	where
		basecBlock := <stm-to-basec> StatementBlock
	
	get-transition-conditionStatement: Some(statement) -> basecStatement
	where
		basecStatement := <stm-to-basec;debug(!"here: ")> statement
		//basecStatement := statement
	
	get-transition-conditionStatement: None() -> []
	
	generate-sm-basec-ifStatement: (None(), statementList) -> Block(statementList)
	
	generate-sm-basec-ifStatement: (condition, statementList) ->  If(condition, Block(statementList))
	where 
		not(<eq> (condition, None()))
	
	expand-event-name(|statemachineID): StateMachineInEvent(Identifier(eventID), block) -> StateMachineInEvent(<expand-event-nameString(|statemachineID)> eventID, block)
		
	expand-event-name(|statemachineID): StateMachineOutEvent(Identifier(eventID), param, binding) -> StateMachineOutEvent(<expand-event-nameString(|statemachineID)> eventID, param, binding)
		
	expand-event-nameString(|statemachineID): eventID -> $[[statemachineID]__event_[eventID]]						//refactor	
			 
	expand-state-name(|statemachineID): StateMachineState(Identifier(stateID), block) -> StateMachineState(<expand-state-nameString(|statemachineID)> stateID, block)
	
	expand-state-nameString(|statemachineID): stateID -> $[[statemachineID]__state_[stateID]]						
	
	//TODO to-basec statements and expressions
	
	stm-to-basec: stmBlock -> basecBlock
	where
		basecBlock:= <topdown(try(to-basec(|None())))> stmBlock
	
	unbox-block: Block(statementList) -> statementList
	unbox-block: None() -> []											 
	 
	//TODO: smIsInState(statemachineID, stateID)
	
	to-basec: StateMachineSend(Identifier(evtName), params) -> Exp(FunctionCall(Identifier(boundFun), params))
	where
		 boundFun := <index-get-data(|BoundFun())> evtName
	
	to-basec(|event): Var(Identifier(name)) -> FieldViaPointer(Var(Identifier("instance")), Identifier(name))
	where
		not(<is-evtParam> (name, event));
		[_ |parent-path] := <index-uri; index-uri-parent> name;
		result:= <index-get-all> Def([Statemachine() | parent-path]);
		not(<eq> (0, <length> result))
	
	to-basec(|event): Var(Identifier(name)) -> Brackets(Dereference(TypeConversion(Pointer(paramType), ArrayField(Var(Identifier("arguments")), Decimal(index)))))//cast expression:   (*((int8_t*)((arguments[0]))));
	where
		not(<eq>(event, None()));
		paramType:= <index-get-data(|EvtParamList()); fetch-elem(get-evtParamType(|name))> event;
		index:= <get-evtParamIndex> (name, event)
		
	get-evtParamType(|paramname): Param(type, Identifier(name)) -> type
	where
		<eq> (paramname, name) 	
	
	get-evtParamIndex: (name, event) -> index
	where
		evtParams:= <index-get-data(|EvtParamList()); map(get-evtParamName)> event;
		index := <subt> (<get-index> (name, evtParams), 1)
		
	is-evtParam: (name, event) -> None()
	where
		not(<eq>(event, None()));
		evtParams:= <index-get-data(|EvtParamList()); map(get-evtParamName)> event;
		<member> (name, evtParams)
		
	get-evtParamName: Param(_, Identifier(name)) -> name//<strip-annos> name	
		
	to-basec: StateMachineInit(e) -> Exp(FunctionCall(Identifier(funName), paramList))
	where
		StatemachineType(Identifier(name)) := <type-of> e;
		funName:= $[[<get-module> name]_sm_init_[name]];
		paramList:= [Address(e)] 
		 
	to-basec: StateMachineTrigger(e, EventRef(Identifier(ident), list)) -> Block([constInit*, argsInit*, Exp(FunctionCall(Identifier(funName), paramList))])
	where
		evtParams:= <index-get-data(|EvtParamList())> ident;
		constInit* := [<zip(generate-decl)> (evtParams, list)];	
		//evtIndex := <get-eventIndex> (ident, e);
		argsInit* := <generate-init> (evtParams, list);
		StatemachineType(Identifier(name)) := <type-of> e;
		funName:= $[[<get-module> name]_sm_execute_[name]];
		evtName:= $[[name]__event_[ident]];
		paramList:= [Address(e), Var(Identifier(evtName)), Var(Identifier("___args"))]					
	
	to-basec: Declaration(StatemachineType(Identifier(name)), init) -> Declaration(StructType(Identifier(structName)), init)
	where
		structName:= $[[<get-module> name]_sm_data_[<strip-annos>name]]
	
	to-basec: StateMachineIsInState(sm, Identifier(st)) -> Equal(Field(Var(sm), Identifier("__currentState")), Var(Identifier(stateName)))
	where
		StatemachineType(Identifier(name)) := <type-of> sm;
		stateName:= $[[name]_state_[st]]
	
	generate-init: (evtParams, list) -> declaration
	where
		<eq> (0, <length> list);
		declaration := [Declaration(Pointer(BasicType("void")), [NoInit((Identifier("___args"), Decimal(<length> list)))])]	
			<+
		initBlock:= InitBlock(<map(generate-addr)> evtParams);
		declaration := [Declaration(Pointer(BasicType("void")), [Init((Identifier("___args"), Decimal(<length> list)), initBlock)])]	
		
	generate-decl: (Param(type, Identifier(name)), initExp) -> Declaration(type, Init(Identifier($[___[<strip-annos> name]]), initExp))
	
	generate-addr: Param(type, Identifier(name)) -> Address(Var(Identifier($[___[<strip-annos> name]])))
	
	get-inEvents: StatemachineType(Identifier(name)) -> <index-lookup-children(|InEvent())> name
	
	get-eventIndex: (eventID, smRef) -> index
	where
		name:= <strip-annos> eventID;
		index:= <get-index> (name, <type-of; get-inEvents; map(def-to-name)> smRef)
	
	def-to-name: Def(uri) -> <index-uri-name> uri
	
	
	adjust-index-def-data(store-results|namespace, path): StateMachineInEvent(_, list) -> <store-results> DefData([namespace|path], EvtParamList(), list)//<store-results> SmEvtParamList([namespace|path], list)//<store-results> Type([namespace|path], type)
    
    adjust-index-def-data(store-results|namespace, path): StateMachineOutEvent(_, _, Binding(Identifier(functionId))) -> <store-results> DefData([namespace|path], BoundFun(), functionId) 
	
	generate-sm-basec-init(|moduleName, statemachineID, initial): varList -> initFunction
	where
		initVars:=<map(generate-sm-basec-initStm)> varList;																
		initState:= <generate-sm-basec-initStm(|statemachineID)> initial;
		initBlock:= [initState| initVars];
		functionName:= Identifier($[[moduleName]_sm_init_[statemachineID]]);
		paramList:= [Param(Pointer(StructType(Identifier($[[moduleName]_sm_data_[statemachineID]]))), Identifier("instance"))];				
		initFunction:= FunDef(None(), BasicType("void"), functionName, ParamList(paramList), initBlock)									
		
	generate-sm-basec-initStm: StateMachineVarDecl(_, _, varName, initValue) -> initStatement
	where
		initStatement:= Exp(Some(Assign(FieldViaPointer(Var(Identifier("instance")), varName), Assign(), initValue))) 
	
	generate-sm-basec-initStm(|statemachineID): Identifier(name) -> initStatement
	where
		varRef:= Var(Identifier($[[statemachineID]__state_[name]]));
		initStatement:= Exp(Some(Assign(FieldViaPointer(Var(Identifier("instance")), Identifier("__currentState")), Assign(), varRef))) 
	
	/*generate-sm-basec-initStm(|statemachineID): None() -> initStatement
	where
		result:= <debug(!"res:"); index-get-all> Def([Statemachine() | statemachineID]);
		varRef:= Var(Identifier($[[statemachineID]__state_[""]]));
		initStatement:= Exp(Some(Assign(FieldViaPointer(Var(Identifier("instance")), Identifier("__currentState")), Assign(), varRef))) 
	*/
	