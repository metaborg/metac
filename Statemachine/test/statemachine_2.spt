module statemachine_2
language MetaC
start symbol Start

test simple [[
	statemachine stmname initial = a {
		state a {
			on next [] -> a
		}
	}
]] parse succeeds

test simple statemechine only with states [[ 
	statemachine stmname initial = a {
		state a {
			on next [] -> a
		}
	}	
]] parse succeeds

test statemachine with states and variables [[
	statemachine stmname initial = a {
		var int8 v = 8
		state a {
		
		}
	}
]] parse succeeds

test statemachine with states and multiple variables [[
	statemachine stmname initial = a {
		var int8 v = 8
		state a {
		
		}
		var int16 r = 4
	}
]] parse succeeds

test statemachine with states,variables and in events [[
	statemachine stmname initial = a {
		var int8 v = 8
		state a {
		
		}
		in inevent()
	}
]] parse succeeds 

test statemachine with states,variables and in events [[
	statemachine stmname initial = a {
		var int8 v = 8
		state a {
		
		}
		in inevent()
		out outevent(int a)
	}
]] parse succeeds

test statemachine with variables and in events [[
	statemachine stmname initial = a {
		var int8 v = 8
		in inevent()
		out outevent(int a)
	}
]] parse fails

//// state tests
test stm with no states [[
	statemachine stname initial = a {
		
	}
]] parse succeeds

test missing name [[
	statemachine initial = a {
		state a {
			on next [] -> a
		}
	}	
]] parse fails

test missing initial state [[
	statemachine stmname {
		state a {
			on next [] -> a
		}
	}
]] parse fails

test missing initial state name [[
	statemachine stmname initial = {
		state a {
			on next [] -> a
		}
	}
]] parse fails

test no events in state [[
	statemachine stmname initial = a {
		state a {
		
		}
	}
]] parse succeeds

test multiple states [[
	statemachine stname initial = a{
		state a {}
		state b {}
		state c {}
	}
]] parse succeeds


//////// var tests
test different positions for var[[
	statemachine stmname intial = a {
		var int8 v = 6
		state a {}
	}
]] parse succeeds

test different positions for var2[[
	statemachine stmname intial = a {
		state a {}
		var int8 v = 6
	}
]] parse succeeds

test different positions for var3[[
	statemachine stmname intial = a {
		state a {}
		in inevent()
		var int8 v = 6
		out outevent(int a)
	}
]] parse succeeds 

test var declaration in state [[
	statemachine stmname intial = a {
		state a {
			var int8 v = 6
		}
	}
]] parse fails

//var <type> <name> = <expr>
test uninitialized variable [[
	statemachine stmname intial = a {
		var int8 v
		state a {}
	}
]] parse fails

test variable declaration missing name [[
	statemachine stmname intial = a {
		var int8 = 8
		state a {}
	}
]] parse fails 

test variable declaration separator [[
	statemachine stmname intial = a {
		var int8 v = 8;
		state a {}
	}
]] parse fails

test multiple variable declaration [[
	statemachine stmname intial = a {
		var int8 v,w = 8
		state a {}
	}
]] parse fails

test multiple variable declaration2 [[
	statemachine stmname intial = a {
		var int8 v, int16 w = 8
		state a {}
	}
]] parse fails

//in events
test statemachine in events with no parameters [[
	statemachine stmname intial = a {
		in next()
		state a {}
	}
]] parse succeeds

test statemachine in events with one parameter [[
	statemachine stmname intial = a {
		in next(int8 b)
		state a {}
	}
]] parse succeeds

test statemachine in events with more parameters [[
	statemachine stmname intial = a {
		in next(int8 b, int8 c)
		state a {}
	}
]] parse succeeds

test statemachine in events with more parameters invalid [[
	statemachine stmname intial = a {
		in next(int8 b, c)
		state a {}
	}
]] parse fails

test statemachine in events with in event declared in state [[
	statemachine stmname intial = a {
		state a {
			in next(int8 b)
		}
	}
]] parse fails

//out events
test statemachine in events with out event declared in state [[
	statemachine stmname intial = a {
		state a {
			out reset()
		}
	}
]] parse fails

test statemachine in events with out event without parameters [[
	statemachine stmname intial = a {
		out reset()
		state a {
		}
	}
]] parse succeeds

test statemachine in events with out event with one parameter [[
	statemachine stmname intial = a {
		out reset(int8 c)
		state a {
		}
	}
]] parse succeeds

test statemachine in events with out event with bounding[[
	statemachine stmname intial = a {
		out reset() -> functionID
		state a {
		}
	}
]] parse succeeds

test statemachine in events with out event with bounding and parameter[[
	statemachine stmname intial = a {
		out reset(int8 c) -> functionID
		state a {
		}
	}
]] parse succeeds

test statemachine in events with out event with multiple bounding [[
	statemachine stmname intial = a {
		out reset(int8 c) -> functionID, secondFunction
		state a {
		}
	}
]] parse fails


//on events
test statemachine on events with no parameter correct[[
	statemachine stmname intial = a {
		state a {
			on next[] -> start
		}
	}
]] parse succeeds

test statemachine on events with condition correct[[
	statemachine stmname intial = a {
		state a {
			on next[a < 5] -> start
		}
	}
]] parse succeeds

test statemachine on events with id condition correct[[
	statemachine stmname intial = a {
		state a {
			on next[id] -> start
		}
	}
]] parse succeeds

test statemachine on events with true as condition[[
	statemachine stmname intial = a {
		state a {
			on next[true] -> start
		}
	}
]] parse succeeds

test statemachine on events with false as condition [[
	statemachine stmname intial = a {
		state a {
			on next[false] -> start
		}
	}
]] parse succeeds

test statemachine on events with function call as condition [[
	statemachine stmname intial = a {
		state a {
			on next[fun()] -> start
		}
	}
]] parse succeeds


test statemachine on events with invalid condition [[
	statemachine stmname intial = a {
		state a {
			on next[a,b] -> start
		}
	}
]] parse fails

test statemachine on events with invalid condition2 [[
	statemachine stmname intial = a {
		state a {
			on next[a;b] -> start
		}
	}
]] parse fails


//entry clause
test statemachine empty entry clause [[
	statemachine stmname intial = a {
		state a {
			entry {}
		}
	}
]] parse succeeds

test statemachine entry clause assignment [[
	statemachine stmname intial = a {
		state a {
			entry {a = 8;}
		}
	}
]] parse succeeds

test statemachine entry clause assignment [[
	statemachine stmname intial = a {
		state a {
			entry {a < 8}
		}
	}
]] parse fails

test statemachine entry clause declare variables [[
	statemachine stmname intial = a {
		state a {
			entry {
				float b;
			}
		}
	}
]] parse succeeds


//exit clause
test statemachine empty exit clause [[
	statemachine stmname intial = a {
		state a {
			exit {}
		}
	}
]] parse succeeds

test statemachine exit clause assignment [[
	statemachine stmname intial = a {
		state a {
			exit {a = 8;}
		}
	}
]] parse succeeds

test statemachine exit clause assignment [[
	statemachine stmname intial = a {
		state a {
			exit {a < 8}
		}
	}
]] parse fails

test statemachine exit clause declare variables [[
	statemachine stmname intial = a {
		state a {
			exit {
				float b;
			}
		}
	}
]] parse succeeds
